// Code generated by machinery's build.rs

use unsafe_unwrap::UnsafeUnwrap;

impl tm_api_registry_api {
    pub const NAME: &'static str = "tm_api_registry_api";

    pub unsafe fn set (& self , name : & str , api : * const :: std :: os :: raw :: c_void , bytes : u32) {
        let name = std :: ffi :: CString :: new (name) . unwrap () ;
        (self . set) . unsafe_unwrap () (name . as_ptr () , api , bytes)
    }

    pub unsafe fn remove (& self , api : * const :: std :: os :: raw :: c_void) {
        (self . remove) . unsafe_unwrap () (api)
    }

    pub unsafe fn get (& self , name : & str) -> * mut :: std :: os :: raw :: c_void {
        let name = std :: ffi :: CString :: new (name) . unwrap () ;
        (self . get) . unsafe_unwrap () (name . as_ptr ())
    }

    pub unsafe fn get_optional (& self , name : & str) -> * mut :: std :: os :: raw :: c_void {
        let name = std :: ffi :: CString :: new (name) . unwrap () ;
        (self . get_optional) . unsafe_unwrap () (name . as_ptr ())
    }

    pub unsafe fn add_implementation (& self , name : & str , implementation : * const :: std :: os :: raw :: c_void) {
        let name = std :: ffi :: CString :: new (name) . unwrap () ;
        (self . add_implementation) . unsafe_unwrap () (name . as_ptr () , implementation)
    }

    pub unsafe fn remove_implementation (& self , name : & str , implementation : * const :: std :: os :: raw :: c_void) {
        let name = std :: ffi :: CString :: new (name) . unwrap () ;
        (self . remove_implementation) . unsafe_unwrap () (name . as_ptr () , implementation)
    }

    pub unsafe fn implementations (& self , name : & str , count : * mut u32) -> * mut * mut :: std :: os :: raw :: c_void {
        let name = std :: ffi :: CString :: new (name) . unwrap () ;
        (self . implementations) . unsafe_unwrap () (name . as_ptr () , count)
    }

    pub unsafe fn add_listener (& self , listener : * const tm_api_registry_listener_i) {
        (self . add_listener) . unsafe_unwrap () (listener)
    }

    pub unsafe fn static_variable (& self , id : tm_strhash_t , size : u32 , file : & str , line : u32) -> * mut :: std :: os :: raw :: c_void {
        let file = std :: ffi :: CString :: new (file) . unwrap () ;
        (self . static_variable) . unsafe_unwrap () (id , size , file . as_ptr () , line)
    }

    pub unsafe fn log_missing_apis (& self) {
        (self . log_missing_apis) . unsafe_unwrap () ()
    }

}

impl tm_logger_api {
    pub const NAME: &'static str = "tm_logger_api";

    pub unsafe fn add_logger (& self , logger : * const tm_logger_i) {
        (self . add_logger) . unsafe_unwrap () (logger)
    }

    pub unsafe fn remove_logger (& self , logger : * const tm_logger_i) {
        (self . remove_logger) . unsafe_unwrap () (logger)
    }

    pub unsafe fn print (& self , log_type : tm_log_type , msg : & str) {
        let msg = std :: ffi :: CString :: new (msg) . unwrap () ;
        (self . print) . unsafe_unwrap () (log_type , msg . as_ptr ())
    }

    pub unsafe fn printf (& self , log_type : tm_log_type , format : & str) -> :: std :: os :: raw :: c_int {
        let format = std :: ffi :: CString :: new (format) . unwrap () ;
        (self . printf) . unsafe_unwrap () (log_type , format . as_ptr ())
    }

}

