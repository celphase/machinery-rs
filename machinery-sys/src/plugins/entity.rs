/* automatically generated by rust-bindgen 0.59.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const TM_USE_STRHASH_TYPE: u32 = 1;
pub const TM_TT_TYPE__CAMERA_COMPONENT: &'static [u8; 20usize] = b"tm_camera_component\0";
pub const TM_TT_TYPE__CONSTRAINT_COMPONENT: &'static [u8; 24usize] = b"tm_constraint_component\0";
pub const TM_TT_TYPE__AIM_CONSTRAINT: &'static [u8; 18usize] = b"tm_aim_constraint\0";
pub const TM_TT_TYPE__FABRIK_CONSTRAINT: &'static [u8; 21usize] = b"tm_fabrik_constraint\0";
pub const TM_TT_TYPE__VERLET_CONSTRAINT__COLLISION_SHAPE: &'static [u8; 37usize] =
    b"tm_verlet_constraint_collision_shape\0";
pub const TM_TT_TYPE__VERLET_CONSTRAINT: &'static [u8; 21usize] = b"tm_verlet_constraint\0";
pub const TM_TT_TYPE__ENTITY_SORT_VALUE: &'static [u8; 21usize] = b"tm_entity_sort_value\0";
pub const TM_TT_TYPE__ENTITY: &'static [u8; 10usize] = b"tm_entity\0";
pub const TM_MAX_COMPONENTS_IN_CONTEXT: u32 = 1024;
pub const TM_ENTITY_CREATE_COMPONENT_INTERFACE_NAME: &'static [u8; 29usize] =
    b"tm_entity_create_component_i\0";
pub const TM_MAX_COMPONENTS_FOR_ENGINE: u32 = 16;
pub const TM_ENTITY_SIMULATION_REGISTER_ENGINES_INTERFACE_NAME: &'static [u8; 29usize] =
    b"tm_entity_register_engines_i\0";
pub const TM_ENTITY_EDITOR_REGISTER_ENGINES_INTERFACE_NAME: &'static [u8; 38usize] =
    b"tm_entity_register_engines_i (editor)\0";
pub const TM_ENTITY_HOT_RELOAD_COMPONENT_INTERFACE_NAME: &'static [u8; 33usize] =
    b"tm_entity_hot_reload_component_i\0";
pub const TM_ENTITY_HOT_RELOAD_SYSTEM_INTERFACE_NAME: &'static [u8; 30usize] =
    b"tm_entity_hot_reload_system_i\0";
pub const TM_ENTITY_API_NAME: &'static [u8; 14usize] = b"tm_entity_api\0";
pub const TM_TT_TYPE__OWNER_COMPONENT: &'static [u8; 19usize] = b"tm_owner_component\0";
pub const TM_OWNER_COMPONENT_API_NAME: &'static [u8; 23usize] = b"tm_owner_component_api\0";
pub const TM_TT_TYPE__SCENE_TREE_COMPONENT: &'static [u8; 24usize] = b"tm_scene_tree_component\0";
pub const TM_SCENE_TREE_COMPONENT_API_NAME: &'static [u8; 28usize] =
    b"tm_scene_tree_component_api\0";
pub const TM_TT_TYPE__TAG_COMPONENT: &'static [u8; 17usize] = b"tm_tag_component\0";
pub const TM_TT_TYPE__TAG: &'static [u8; 7usize] = b"tm_tag\0";
pub const TM_TAG_COMPONENT_API_NAME: &'static [u8; 21usize] = b"tm_tag_component_api\0";
pub const TM_TT_TYPE__TRANSFORM_COMPONENT: &'static [u8; 23usize] = b"tm_transform_component\0";
pub const TM_TRANSFORM_COMPONENT_API_NAME: &'static [u8; 27usize] = b"tm_transform_component_api\0";
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_vec2_t {
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_vec3_t {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_vec4_t {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_mat44_t {
    pub xx: f32,
    pub xy: f32,
    pub xz: f32,
    pub xw: f32,
    pub yx: f32,
    pub yy: f32,
    pub yz: f32,
    pub yw: f32,
    pub zx: f32,
    pub zy: f32,
    pub zz: f32,
    pub zw: f32,
    pub wx: f32,
    pub wy: f32,
    pub wz: f32,
    pub ww: f32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_transform_t {
    pub pos: tm_vec3_t,
    pub rot: tm_vec4_t,
    pub scl: tm_vec3_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_rect_t {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_str_t {
    pub data: *const ::std::os::raw::c_char,
    pub size: u32,
    pub null_terminated: u32,
}
impl Default for tm_str_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_clock_o {
    pub opaque: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_uuid_t {
    pub a: u64,
    pub b: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_color_srgb_t {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_tt_type_t {
    pub u64_: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_tt_id_t {
    pub __bindgen_anon_1: tm_tt_id_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tm_tt_id_t__bindgen_ty_1 {
    pub u64_: u64,
    pub __bindgen_anon_1: tm_tt_id_t__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Default, Copy, Clone)]
pub struct tm_tt_id_t__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl tm_tt_id_t__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn type_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u64) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn generation(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 22u8) as u64) }
    }
    #[inline]
    pub fn set_generation(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn index(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u64) }
    }
    #[inline]
    pub fn set_index(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: u64,
        generation: u64,
        index: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let type_: u64 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(10usize, 22u8, {
            let generation: u64 = unsafe { ::std::mem::transmute(generation) };
            generation as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let index: u64 = unsafe { ::std::mem::transmute(index) };
            index as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for tm_tt_id_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tm_tt_id_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_tt_undo_scope_t {
    pub u64_: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_strhash_t {
    pub u64_: u64,
}
pub const TM_TT_PROP__CAMERA_COMPONENT__PROJECTION_MODE: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__CAMERA_COMPONENT__NEAR_PLANE: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__CAMERA_COMPONENT__FAR_PLANE: ::std::os::raw::c_int = 2;
pub const TM_TT_PROP__CAMERA_COMPONENT__VERTICAL_FOV: ::std::os::raw::c_int = 3;
pub const TM_TT_PROP__CAMERA_COMPONENT__BOX_HEIGHT: ::std::os::raw::c_int = 4;
pub const TM_TT_PROP__CAMERA_COMPONENT__SHUTTER_SPEED: ::std::os::raw::c_int = 5;
pub const TM_TT_PROP__CAMERA_COMPONENT__APERTURE: ::std::os::raw::c_int = 6;
pub const TM_TT_PROP__CAMERA_COMPONENT__ISO: ::std::os::raw::c_int = 7;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const TM_CAMERA_PROJECTION_MODE__PERSPECTIVE: tm_camera_projection_mode = 0;
pub const TM_CAMERA_PROJECTION_MODE__ORTHOGRAPHIC: tm_camera_projection_mode = 1;
pub type tm_camera_projection_mode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_camera_component_t {
    pub projection_mode: tm_camera_projection_mode,
    pub near_plane: f32,
    pub far_plane: f32,
    pub vertical_fov: f32,
    pub box_height: f32,
    pub shutter_speed: f32,
    pub aperture: f32,
    pub iso: f32,
}
impl Default for tm_camera_component_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tm_entity_t {
    pub __bindgen_anon_1: tm_entity_t__bindgen_ty_1,
    pub u64_: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_entity_t__bindgen_ty_1 {
    pub index: u32,
    pub generation: u32,
}
impl Default for tm_entity_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_component_type_t {
    pub index: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_set_entity_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_entity_context_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_allocator_i {
    _unused: [u8; 0],
}
pub const TM_CONSTRAINT_TYPE__NONE: tm_constraint_type = 0;
pub const TM_CONSTRAINT_TYPE__LOCK: tm_constraint_type = 1;
pub const TM_CONSTRAINT_TYPE__AIM: tm_constraint_type = 2;
pub const TM_CONSTRAINT_TYPE__FABRIK: tm_constraint_type = 3;
pub const TM_CONSTRAINT_TYPE__VERLET: tm_constraint_type = 4;
pub const TM_CONSTRAINT_TYPE__COUNT: tm_constraint_type = 5;
pub type tm_constraint_type = ::std::os::raw::c_int;
pub const TM_CONSTRAINT_COMPONENT_NOT_LINKED_TO_SCENE_TREE_NODE: ::std::os::raw::c_int = -1;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub const TM_TT_PROP__CONSTRAINT_COMPONENT__ENABLED: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__CONSTRAINT_COMPONENT__BLEND_TIME: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__CONSTRAINT_COMPONENT__CONSTRAINED_ENTITY: ::std::os::raw::c_int = 2;
pub const TM_TT_PROP__CONSTRAINT_COMPONENT__CONSTRAINED_NODE: ::std::os::raw::c_int = 3;
pub const TM_TT_PROP__CONSTRAINT_COMPONENT__GOAL_ENTITY: ::std::os::raw::c_int = 4;
pub const TM_TT_PROP__CONSTRAINT_COMPONENT__GOAL_NODE: ::std::os::raw::c_int = 5;
pub const TM_TT_PROP__CONSTRAINT_COMPONENT__GOAL_POSITION: ::std::os::raw::c_int = 6;
pub const TM_TT_PROP__CONSTRAINT_COMPONENT__MATCH_ROTATION: ::std::os::raw::c_int = 7;
pub const TM_TT_PROP__CONSTRAINT_COMPONENT__GOAL_ROTATION: ::std::os::raw::c_int = 8;
pub const TM_TT_PROP__CONSTRAINT_COMPONENT__TYPE: ::std::os::raw::c_int = 9;
pub const TM_TT_PROP__CONSTRAINT_COMPONENT__CONSTRAINT: ::std::os::raw::c_int = 10;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
pub const TM_TT_PROP__AIM_CONSTRAINT__AXIS: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__AIM_CONSTRAINT__MAX_ANGLE: ::std::os::raw::c_int = 1;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
pub const TM_TT_PROP__FABRIK_CONSTRAINT__IK_CHAIN_LENGTH: ::std::os::raw::c_int = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub const TM_VERLET_CONSTRAINT_COLLISION_SHAPE_TYPE__PLANE:
    tm_verlet_constraint_collision_shape_type = 0;
pub const TM_VERLET_CONSTRAINT_COLLISION_SHAPE_TYPE__SPHERE:
    tm_verlet_constraint_collision_shape_type = 1;
pub const TM_VERLET_CONSTRAINT_COLLISION_SHAPE_TYPE__COUNT:
    tm_verlet_constraint_collision_shape_type = 2;
pub type tm_verlet_constraint_collision_shape_type = ::std::os::raw::c_int;
pub const TM_TT_PROP__VERLET_CONSTRAINT__COLLISION_SHAPE__TYPE: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__VERLET_CONSTRAINT__COLLISION_SHAPE__NODE: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__VERLET_CONSTRAINT__COLLISION_SHAPE__POSITION: ::std::os::raw::c_int = 2;
pub const TM_TT_PROP__VERLET_CONSTRAINT__COLLISION_SHAPE__ROTATION: ::std::os::raw::c_int = 3;
pub const TM_TT_PROP__VERLET_CONSTRAINT__COLLISION_SHAPE__RADIUS: ::std::os::raw::c_int = 4;
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
pub const TM_TT_PROP__VERLET_CONSTRAINT__CHAIN_LENGTH: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__VERLET_CONSTRAINT__DAMPING: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__VERLET_CONSTRAINT__COLLISION_SHAPES: ::std::os::raw::c_int = 2;
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_aim_constraint_t {
    pub axis: tm_vec3_t,
    pub max_angle: f32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_fabrik_constraint_t {
    pub ik_chain_length: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_verlet_constraint_data_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_verlet_constraint_t {
    pub chain_length: u32,
    pub damping: f32,
    pub data: *mut tm_verlet_constraint_data_t,
}
impl Default for tm_verlet_constraint_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_constraint_component_t {
    pub type_: tm_constraint_type,
    pub enabled: bool,
    pub was_enabled: bool,
    pub _padding_226: [::std::os::raw::c_char; 2usize],
    pub blend_time: f32,
    pub blend: f32,
    pub constrained_entity: tm_entity_t,
    pub constrained_node_idx: u32,
    pub _padding_239: [::std::os::raw::c_char; 4usize],
    pub goal_entity: tm_entity_t,
    pub goal_node_idx: u32,
    pub _padding_246: [::std::os::raw::c_char; 4usize],
    pub goal_position: tm_vec3_t,
    pub match_rotation: bool,
    pub _padding_254: [::std::os::raw::c_char; 3usize],
    pub goal_rotation: tm_vec4_t,
    pub __bindgen_anon_1: tm_constraint_component_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tm_constraint_component_t__bindgen_ty_1 {
    pub aim: tm_aim_constraint_t,
    pub fabrik: tm_fabrik_constraint_t,
    pub verlet: tm_verlet_constraint_t,
}
impl Default for tm_constraint_component_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tm_constraint_component_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_constraint_component_manager_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_temp_allocator_i {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_primitive_drawer_buffer_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_camera_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_gamestate_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_gamestate_object_id_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_gamestate_struct_id_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_gamestate_member_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_gamestate_persistent_buffer_t {
    _unused: [u8; 0],
}
pub const TM_TT_PROP__ENTITY__SORT_VALUE_CHILD: TM_TT_PROP__ENTITY_SORT_VALUE = 0;
pub const TM_TT_PROP__ENTITY__SORT_VALUE_VALUE: TM_TT_PROP__ENTITY_SORT_VALUE = 1;
pub type TM_TT_PROP__ENTITY_SORT_VALUE = ::std::os::raw::c_int;
pub const TM_TT_PROP__ENTITY__NAME: TM_TT_PROP__ENTITY = 0;
pub const TM_TT_PROP__ENTITY__COMPONENTS: TM_TT_PROP__ENTITY = 1;
pub const TM_TT_PROP__ENTITY__CHILDREN: TM_TT_PROP__ENTITY = 2;
pub const TM_TT_PROP__ENTITY__CHILD_SORT_VALUES: TM_TT_PROP__ENTITY = 3;
pub const TM_TT_PROP__ENTITY__PERSISTENCE: TM_TT_PROP__ENTITY = 4;
pub type TM_TT_PROP__ENTITY = ::std::os::raw::c_int;
pub const TM_ENTITY_PERSISTENCE__INHERIT: tm_entity_persistence = 0;
pub const TM_ENTITY_PERSISTENCE__PERSISTENT: tm_entity_persistence = 1;
pub const TM_ENTITY_PERSISTENCE__NON_PERSISTENT: tm_entity_persistence = 2;
pub type tm_entity_persistence = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_component_mask_t {
    pub bits: [u64; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_component_persistence_i {
    pub custom_persistent_state: bool,
    pub _padding_131: [::std::os::raw::c_char; 3usize],
    pub size: u32,
    pub num_members: u32,
    pub _padding_146: [::std::os::raw::c_char; 4usize],
    pub members: *mut tm_gamestate_member_t,
    pub manual_tracking: bool,
    pub notify_reload_before_deserialization: bool,
    pub compute_initial_hash_immediately: bool,
    pub _padding_184: [::std::os::raw::c_char; 1usize],
    pub restore_sort_order: f32,
    pub user_data: *mut ::std::os::raw::c_void,
    pub serialize: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            component: tm_component_type_t,
            buffer: *mut ::std::os::raw::c_void,
            buffer_size: u32,
        ),
    >,
    pub deserialize: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            component: tm_component_type_t,
            buffer: *const ::std::os::raw::c_void,
            buffer_size: u32,
        ),
    >,
    pub compute_hash: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            component: tm_component_type_t,
            data: *const ::std::os::raw::c_void,
            size: u32,
        ) -> u64,
    >,
    pub compute_asset_hash: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            tt: *mut tm_the_truth_o,
            component: tm_component_type_t,
            asset: tm_tt_id_t,
        ) -> u64,
    >,
}
impl Default for tm_component_persistence_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_component_manager_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_component_i {
    pub name: *const ::std::os::raw::c_char,
    pub bytes: u32,
    pub _padding_251: [::std::os::raw::c_char; 4usize],
    pub default_data: *const ::std::os::raw::c_void,
    pub manager: *mut tm_component_manager_o,
    pub components_created:
        ::std::option::Option<unsafe extern "C" fn(manager: *mut tm_component_manager_o)>,
    pub load_asset: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *mut tm_component_manager_o,
            e: tm_entity_t,
            data: *mut ::std::os::raw::c_void,
            tt: *const tm_the_truth_o,
            asset: tm_tt_id_t,
        ) -> bool,
    >,
    pub asset_loaded: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *mut tm_component_manager_o,
            e: tm_entity_t,
            data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub asset_loaded_sort_order: f64,
    pub asset_reloaded: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *mut tm_component_manager_o,
            e: tm_entity_t,
            data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub add: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *mut tm_component_manager_o,
            e: tm_entity_t,
            data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *mut tm_component_manager_o,
            e: tm_entity_t,
            data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(manager: *mut tm_component_manager_o)>,
    pub debug_draw: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *mut tm_component_manager_o,
            e: *mut tm_entity_t,
            data: *mut *const ::std::os::raw::c_void,
            n: u32,
            pbuf: *mut tm_primitive_drawer_buffer_t,
            vbuf: *mut tm_primitive_drawer_buffer_t,
            allocator: *mut tm_allocator_i,
            camera: *const tm_camera_t,
            viewport: tm_rect_t,
        ),
    >,
    pub debug_draw_settings: tm_tt_id_t,
    pub persistence: *mut tm_component_persistence_i,
}
impl Default for tm_component_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type tm_entity_create_component_i =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_engine_update_array_t {
    pub entities: *mut tm_entity_t,
    pub components: [*mut ::std::os::raw::c_void; 16usize],
    pub component_bytes: [u32; 16usize],
    pub n: u32,
    pub _padding_336: [::std::os::raw::c_char; 4usize],
}
impl Default for tm_engine_update_array_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_entity_blackboard_value_t {
    pub id: tm_strhash_t,
    pub __bindgen_anon_1: tm_entity_blackboard_value_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tm_entity_blackboard_value_t__bindgen_ty_1 {
    pub double_value: f64,
    pub ptr_value: *mut ::std::os::raw::c_void,
}
impl Default for tm_entity_blackboard_value_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tm_entity_blackboard_value_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct tm_engine_update_set_t {
    pub engine: *const tm_engine_i,
    pub total_entities: u32,
    pub _padding_359: [::std::os::raw::c_char; 4usize],
    pub blackboard_start: *const tm_entity_blackboard_value_t,
    pub blackboard_end: *const tm_entity_blackboard_value_t,
    pub num_arrays: u32,
    pub _padding_363: [::std::os::raw::c_char; 4usize],
    pub arrays: __IncompleteArrayField<tm_engine_update_array_t>,
}
impl Default for tm_engine_update_set_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_engine_o {
    _unused: [u8; 0],
}
pub const TM_MAX_DEPENDENCIES_FOR_ENGINE: ::std::os::raw::c_int = 16;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_engine_system_common_i {
    pub ui_name: *const ::std::os::raw::c_char,
    pub hash: tm_strhash_t,
    pub disabled: bool,
    pub exclusive: bool,
    pub _padding_410: [::std::os::raw::c_char; 2usize],
    pub num_components: u32,
    pub components: [tm_component_type_t; 16usize],
    pub writes: [bool; 16usize],
    pub before_me: [tm_strhash_t; 16usize],
    pub after_me: [tm_strhash_t; 16usize],
    pub phase: tm_strhash_t,
}
impl Default for tm_engine_system_common_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_engine_i {
    pub __bindgen_padding_0: [u64; 46usize],
    pub inst: *mut tm_engine_o,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_engine_o, data: *mut tm_engine_update_set_t),
    >,
    pub num_excluded: u32,
    pub excluded: [tm_component_type_t; 16usize],
    pub _padding_469: [::std::os::raw::c_char; 4usize],
    pub filter: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_engine_o,
            components: *const tm_component_type_t,
            num_components: u32,
            mask: *const tm_component_mask_t,
        ) -> bool,
    >,
}
impl Default for tm_engine_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_entity_system_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_entity_system_i {
    pub __bindgen_padding_0: [u64; 46usize],
    pub inst: *mut tm_entity_system_o,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, inst: *mut tm_entity_system_o),
    >,
}
impl Default for tm_entity_system_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type tm_entity_register_engines_i =
    ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o)>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_entity_hot_reload_component_i {
    pub hash: tm_strhash_t,
    pub reload: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, component: *mut tm_component_i),
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_entity_hot_reload_system_i {
    pub hash: tm_strhash_t,
    pub reload: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, system: *mut tm_entity_system_i),
    >,
}
pub const TM_ENTITY_CREATE_COMPONENTS_NONE: tm_entity_create_components = 0;
pub const TM_ENTITY_CREATE_COMPONENTS_ALL: tm_entity_create_components = 1;
pub const TM_ENTITY_CREATE_COMPONENTS_EDITOR: tm_entity_create_components = 2;
pub type tm_entity_create_components = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_entity_listener_i {
    pub man: *mut tm_component_manager_o,
    pub notify_e: tm_entity_t,
    pub notify_c: tm_component_type_t,
    pub _padding_635: [::std::os::raw::c_char; 4usize],
    pub notify: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            man: *mut tm_component_manager_o,
            e: tm_entity_t,
            c: *mut ::std::os::raw::c_void,
            notify_e: tm_entity_t,
            notify_c: *mut ::std::os::raw::c_void,
        ),
    >,
}
impl Default for tm_entity_listener_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_entity_event_listener_i {
    pub inst: *mut ::std::os::raw::c_void,
    pub user_data: *mut ::std::os::raw::c_void,
    pub notify: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut ::std::os::raw::c_void,
            ctx: *mut tm_entity_context_o,
            event: tm_strhash_t,
            e: tm_entity_t,
            event_data: *const ::std::os::raw::c_void,
            event_data_bytes: u32,
            user_data: *mut ::std::os::raw::c_void,
        ),
    >,
}
impl Default for tm_entity_event_listener_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_entity_array_t {
    pub entities: *mut tm_entity_t,
    pub n: u32,
    pub _padding_663: [::std::os::raw::c_char; 4usize],
}
impl Default for tm_entity_array_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct tm_entity_set_t {
    pub total_entities: u32,
    pub num_arrays: u32,
    pub arrays: __IncompleteArrayField<tm_entity_array_t>,
}
impl Default for tm_entity_set_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_entity_api {
    pub create_truth_types: ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o)>,
    pub create_context: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut tm_allocator_i,
            tt: *mut tm_the_truth_o,
            create_components: tm_entity_create_components,
        ) -> *mut tm_entity_context_o,
    >,
    pub destroy_context: ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o)>,
    pub register_component: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            com: *const tm_component_i,
        ) -> tm_component_type_t,
    >,
    pub num_components:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o) -> u32>,
    pub component: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            component_type: tm_component_type_t,
        ) -> *const tm_component_i,
    >,
    pub register_engine: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, engine: *const tm_engine_i),
    >,
    pub registered_engines: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, count: *mut u32) -> *mut tm_engine_i,
    >,
    pub register_system: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, system: *const tm_entity_system_i),
    >,
    pub registered_systems: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            count: *mut u32,
        ) -> *mut tm_entity_system_i,
    >,
    pub create_child_allocator: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            name: *const ::std::os::raw::c_char,
            a: *mut tm_allocator_i,
        ),
    >,
    pub destroy_child_allocator: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, a: *mut tm_allocator_i),
    >,
    pub the_truth: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o) -> *mut tm_the_truth_o,
    >,
    pub create_entity:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o) -> tm_entity_t>,
    pub batch_create_entity: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, es: *mut tm_entity_t, n: u32),
    >,
    pub create_entity_from_mask: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            mask: *const tm_component_mask_t,
        ) -> tm_entity_t,
    >,
    pub batch_create_entity_from_mask: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            mask: *const tm_component_mask_t,
            es: *mut tm_entity_t,
            n: u32,
        ),
    >,
    pub create_entity_from_asset: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, asset: tm_tt_id_t) -> tm_entity_t,
    >,
    pub batch_create_entity_from_asset: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            asset: tm_tt_id_t,
            es: *mut tm_entity_t,
            n: u32,
        ),
    >,
    pub destroy_entity:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o, e: tm_entity_t)>,
    pub batch_destroy_entity: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, es: *const tm_entity_t, n: u32),
    >,
    pub destroy_all_entities:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o)>,
    pub queue_destroy_entities: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, es: *const tm_entity_t, n: u32),
    >,
    pub is_alive: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, e: tm_entity_t) -> bool,
    >,
    pub num_entities:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o) -> u32>,
    pub entities_matching: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            required: *const tm_component_mask_t,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_entity_set_t,
    >,
    pub entities_matching_with_forbidden: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            required: *const tm_component_mask_t,
            forbidden: *const tm_component_mask_t,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_entity_set_t,
    >,
    pub flatten_set: ::std::option::Option<
        unsafe extern "C" fn(entities: *mut tm_entity_t, set: *const tm_entity_set_t),
    >,
    pub lookup_component_type: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            name_hash: tm_strhash_t,
        ) -> tm_component_type_t,
    >,
    pub component_manager: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            component_type: tm_component_type_t,
        ) -> *mut tm_component_manager_o,
    >,
    pub component_manager_by_hash: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            name_hash: tm_strhash_t,
        ) -> *mut tm_component_manager_o,
    >,
    pub create_component_mask: ::std::option::Option<
        unsafe extern "C" fn(components: *const tm_component_type_t, n: u32) -> tm_component_mask_t,
    >,
    pub component_mask: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
        ) -> *const tm_component_mask_t,
    >,
    pub add_component: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            component: tm_component_type_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub get_component: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            component: tm_component_type_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub get_component_by_hash: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            name_hash: tm_strhash_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub remove_component: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            component: tm_component_type_t,
        ),
    >,
    pub call_remove_on_all_entities: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, component: tm_component_type_t),
    >,
    pub get_engine: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, hash: tm_strhash_t) -> *mut tm_engine_i,
    >,
    pub get_system: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            hash: tm_strhash_t,
        ) -> *mut tm_entity_system_i,
    >,
    pub parent: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, e: tm_entity_t) -> tm_entity_t,
    >,
    pub children: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_entity_t,
    >,
    pub asset: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, e: tm_entity_t) -> tm_tt_id_t,
    >,
    pub find_entity_from_asset: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, asset: tm_tt_id_t) -> tm_entity_t,
    >,
    pub resolve_asset_reference: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            asset: tm_tt_id_t,
        ) -> tm_entity_t,
    >,
    pub resolve_path: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            path: *const ::std::os::raw::c_char,
        ) -> tm_entity_t,
    >,
    pub propagate_asset_changes:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o)>,
    pub propagate_listen_to: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, e: tm_entity_t, object: tm_tt_id_t),
    >,
    pub set_blackboard_double: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, id: tm_strhash_t, value: f64),
    >,
    pub set_blackboard_ptr: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            id: tm_strhash_t,
            value: *mut ::std::os::raw::c_void,
        ),
    >,
    pub has_blackboard: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, id: tm_strhash_t) -> bool,
    >,
    pub get_blackboard_double: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, id: tm_strhash_t, def: f64) -> f64,
    >,
    pub get_blackboard_ptr: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            id: tm_strhash_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub run_engine: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, engine: *const tm_engine_i),
    >,
    pub update: ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o)>,
    pub listen: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            c: tm_component_type_t,
            listener: *const tm_entity_listener_i,
        ),
    >,
    pub unlisten: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            c: tm_component_type_t,
            listener: *const tm_entity_listener_i,
        ),
    >,
    pub notify: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            component_type: tm_component_type_t,
            entities: *const tm_entity_t,
            num_entities: u32,
        ),
    >,
    pub listen_event: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            event: tm_strhash_t,
            listener: *const tm_entity_event_listener_i,
        ),
    >,
    pub unlisten_event: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            event: tm_strhash_t,
            listener: *const tm_entity_event_listener_i,
        ),
    >,
    pub unlisten_all: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o, instance: *mut ::std::os::raw::c_void),
    >,
    pub notify_event: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            event: tm_strhash_t,
            e: *mut tm_entity_t,
            entity_stride: u32,
            data: *mut ::std::os::raw::c_void,
            data_stride: u32,
            n: u32,
        ),
    >,
    pub hot_reload: ::std::option::Option<unsafe extern "C" fn()>,
    pub set_debug_draw: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            component_type: tm_component_type_t,
            tag: tm_strhash_t,
            debug_draw: bool,
        ),
    >,
    pub has_debug_draw: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            component_type: tm_component_type_t,
            tag: tm_strhash_t,
        ) -> bool,
    >,
    pub clear_debug_draw:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o)>,
    pub debug_draw: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            pbuf: *mut tm_primitive_drawer_buffer_t,
            vbuf: *mut tm_primitive_drawer_buffer_t,
            allocator: *mut tm_allocator_i,
            camera: *const tm_camera_t,
            viewport: tm_rect_t,
        ),
    >,
    pub gamestate: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut tm_entity_context_o) -> *mut tm_gamestate_o,
    >,
    pub override_component_persistence: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            c: tm_component_type_t,
            persistence: *mut tm_component_persistence_i,
        ),
    >,
    pub propagate_changes_to_gamestate:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o)>,
    pub make_entity_persistent:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_entity_context_o, e: tm_entity_t)>,
    pub get_entity_gamestate_id: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            output: *mut tm_gamestate_object_id_t,
        ) -> bool,
    >,
    pub get_component_gamestate_id: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            e: tm_entity_t,
            c: tm_component_type_t,
            output: *mut tm_gamestate_struct_id_t,
        ) -> bool,
    >,
    pub lookup_entity_from_gamestate_id: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_entity_context_o,
            id: *const tm_gamestate_object_id_t,
        ) -> tm_entity_t,
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_owner_component_t {
    pub num_children: u32,
    pub inst: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_owner_component_manager_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_owner_component_api {
    pub children: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *const tm_owner_component_manager_o,
            c: *const tm_owner_component_t,
            children: *mut tm_entity_t,
        ),
    >,
    pub add_children: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *mut tm_owner_component_manager_o,
            c: *mut tm_owner_component_t,
            e: *const tm_entity_t,
            n: u32,
        ),
    >,
    pub remove_children: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *mut tm_owner_component_manager_o,
            c: *mut tm_owner_component_t,
            e: *const tm_entity_t,
            n: u32,
        ),
    >,
    pub remove_all_children: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *mut tm_owner_component_manager_o,
            c: *mut tm_owner_component_t,
        ),
    >,
    pub descendants: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *const tm_owner_component_manager_o,
            c: *const tm_owner_component_t,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_entity_t,
    >,
}
pub const TM_TT_PROP__SCENE_TREE_COMPONENT__NODES: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__SCENE_TREE_COMPONENT__NODE_NAMES: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__SCENE_TREE_COMPONENT__ASSET: ::std::os::raw::c_int = 2;
pub type _bindgen_ty_9 = ::std::os::raw::c_int;
pub const TM_SCENE_TREE_COMPONENT_ROOT_NODE_PARENT: ::std::os::raw::c_int = -1;
pub type _bindgen_ty_10 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_scene_tree_node_t {
    pub name: tm_strhash_t,
    pub parent_idx: u32,
    pub local_transform: tm_transform_t,
    pub _padding_53: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_scene_tree_node_names_t {
    pub hash: u64,
    pub n: u32,
    pub _padding_71: [::std::os::raw::c_char; 4usize],
    pub node_names: *const tm_strhash_t,
}
impl Default for tm_scene_tree_node_names_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_scene_tree_component_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_scene_tree_component_manager_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_scene_tree_component_api {
    pub setup_nodes: ::std::option::Option<
        unsafe extern "C" fn(
            manager: *mut tm_scene_tree_component_manager_o,
            st: *mut tm_scene_tree_component_t,
            nodes: *const tm_scene_tree_node_t,
            num_nodes: u32,
            debug_names: *const ::std::os::raw::c_char,
        ),
    >,
    pub node_names: ::std::option::Option<
        unsafe extern "C" fn(st: *const tm_scene_tree_component_t) -> tm_scene_tree_node_names_t,
    >,
    pub node_index_from_name: ::std::option::Option<
        unsafe extern "C" fn(
            component: *const tm_scene_tree_component_t,
            node_name: tm_strhash_t,
            not_found: u32,
        ) -> u32,
    >,
    pub node_debug_name_from_index: ::std::option::Option<
        unsafe extern "C" fn(
            component: *const tm_scene_tree_component_t,
            node_idx: u32,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub world_matrices: ::std::option::Option<
        unsafe extern "C" fn(component: *const tm_scene_tree_component_t) -> *const tm_mat44_t,
    >,
    pub local_matrices: ::std::option::Option<
        unsafe extern "C" fn(component: *const tm_scene_tree_component_t) -> *const tm_mat44_t,
    >,
    pub local_transform: ::std::option::Option<
        unsafe extern "C" fn(
            component: *const tm_scene_tree_component_t,
            node_idx: u32,
        ) -> tm_transform_t,
    >,
    pub world_transform: ::std::option::Option<
        unsafe extern "C" fn(
            component: *const tm_scene_tree_component_t,
            node_idx: u32,
        ) -> tm_transform_t,
    >,
    pub set_local_transform: ::std::option::Option<
        unsafe extern "C" fn(
            component: *mut tm_scene_tree_component_t,
            node_idx: u32,
            t: *const tm_transform_t,
        ),
    >,
    pub set_local_matrix: ::std::option::Option<
        unsafe extern "C" fn(
            component: *mut tm_scene_tree_component_t,
            node_idx: u32,
            tm: *const tm_mat44_t,
        ),
    >,
    pub set_world_transform: ::std::option::Option<
        unsafe extern "C" fn(
            component: *mut tm_scene_tree_component_t,
            trans: *const tm_transform_t,
            node_idx: u32,
            t: *const tm_transform_t,
        ),
    >,
    pub transform: ::std::option::Option<
        unsafe extern "C" fn(
            st: *mut tm_scene_tree_component_t,
            trans: *const tm_transform_t,
            version: u64,
        ),
    >,
    pub transform_subtree: ::std::option::Option<
        unsafe extern "C" fn(st: *mut tm_scene_tree_component_t, node_idx: u32),
    >,
    pub set_debug_color: ::std::option::Option<
        unsafe extern "C" fn(st: *mut tm_scene_tree_component_t, color: tm_color_srgb_t),
    >,
    pub node_parent_index: ::std::option::Option<
        unsafe extern "C" fn(st: *mut tm_scene_tree_component_t, node_idx: u32) -> u32,
    >,
}
pub const TM_TT_PROP__TAG_COMPONENT__TAGS: ::std::os::raw::c_int = 0;
pub type _bindgen_ty_11 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_tag_component_t {
    pub first_ti: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_tag_component_manager_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_tag_component_api {
    pub tag_assets: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_tt_id_t,
    >,
    pub add_tag: ::std::option::Option<
        unsafe extern "C" fn(
            tcm: *mut tm_tag_component_manager_o,
            e: tm_entity_t,
            tag: tm_strhash_t,
        ),
    >,
    pub add_tag_optional: ::std::option::Option<
        unsafe extern "C" fn(
            tcm: *mut tm_tag_component_manager_o,
            e: tm_entity_t,
            tag: tm_strhash_t,
        ),
    >,
    pub remove_tag: ::std::option::Option<
        unsafe extern "C" fn(
            tcm: *mut tm_tag_component_manager_o,
            e: tm_entity_t,
            tag: tm_strhash_t,
        ),
    >,
    pub has_tag: ::std::option::Option<
        unsafe extern "C" fn(
            tcm: *const tm_tag_component_manager_o,
            e: tm_entity_t,
            tag: tm_strhash_t,
        ) -> bool,
    >,
    pub find_all: ::std::option::Option<
        unsafe extern "C" fn(
            tcm: *const tm_tag_component_manager_o,
            tag: tm_strhash_t,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_entity_t,
    >,
    pub find_first: ::std::option::Option<
        unsafe extern "C" fn(
            tcm: *const tm_tag_component_manager_o,
            tag: tm_strhash_t,
        ) -> tm_entity_t,
    >,
}
pub const TM_TT_PROP__TRANSFORM_COMPONENT__LOCAL_POSITION: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__TRANSFORM_COMPONENT__LOCAL_ROTATION: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__TRANSFORM_COMPONENT__LOCAL_SCALE: ::std::os::raw::c_int = 2;
pub const TM_TT_PROP__TRANSFORM_COMPONENT__SCENE_TREE_NODE: ::std::os::raw::c_int = 3;
pub type _bindgen_ty_12 = ::std::os::raw::c_int;
pub const TM_TRANSFORM_COMPONENT_NOT_LINKED_TO_SCENE_TREE_NODE: ::std::os::raw::c_int = -1;
pub type _bindgen_ty_13 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_transform_component_t {
    pub world: tm_transform_t,
    pub local: tm_transform_t,
    pub parent: tm_entity_t,
    pub version: u32,
    pub scene_tree_node_idx: u32,
    pub scene_tree_node_name: tm_strhash_t,
}
impl Default for tm_transform_component_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_transform_component_manager_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_transform_component_api {
    pub get_position: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
        ) -> tm_vec3_t,
    >,
    pub get_rotation: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
        ) -> tm_vec4_t,
    >,
    pub get_scale: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
        ) -> tm_vec3_t,
    >,
    pub get_transform: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
        ) -> *const tm_transform_t,
    >,
    pub set_position: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
            pos: tm_vec3_t,
        ),
    >,
    pub set_rotation: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
            rot: tm_vec4_t,
        ),
    >,
    pub set_scale: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
            scl: tm_vec3_t,
        ),
    >,
    pub set_transform: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
            transform: *const tm_transform_t,
        ),
    >,
    pub get_local_position: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
        ) -> tm_vec3_t,
    >,
    pub get_local_rotation: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
        ) -> tm_vec4_t,
    >,
    pub get_local_scale: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
        ) -> tm_vec3_t,
    >,
    pub get_local_transform: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
        ) -> *const tm_transform_t,
    >,
    pub set_local_position: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
            local_pos: tm_vec3_t,
        ),
    >,
    pub set_local_rotation: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
            local_rot: tm_vec4_t,
        ),
    >,
    pub set_local_scale: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
            local_scl: tm_vec3_t,
        ),
    >,
    pub set_local_transform: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
            local_transform: *const tm_transform_t,
        ),
    >,
    pub update_world_transform: ::std::option::Option<
        unsafe extern "C" fn(man: *mut tm_transform_component_manager_o, e: tm_entity_t),
    >,
    pub update_local_transform: ::std::option::Option<
        unsafe extern "C" fn(man: *mut tm_transform_component_manager_o, e: tm_entity_t),
    >,
    pub compute_world_transform: ::std::option::Option<
        unsafe extern "C" fn(
            world: *mut tm_transform_t,
            local: *const tm_transform_t,
            parent_world: *const tm_transform_t,
        ) -> *mut tm_transform_t,
    >,
    pub compute_local_transform: ::std::option::Option<
        unsafe extern "C" fn(
            local: *mut tm_transform_t,
            world: *const tm_transform_t,
            parent_world: *const tm_transform_t,
        ) -> *mut tm_transform_t,
    >,
    pub compute_parent_transform: ::std::option::Option<
        unsafe extern "C" fn(
            parent_world: *mut tm_transform_t,
            world: *const tm_transform_t,
            local: *const tm_transform_t,
        ) -> *mut tm_transform_t,
    >,
    pub set_parent: ::std::option::Option<
        unsafe extern "C" fn(
            man: *mut tm_transform_component_manager_o,
            e: tm_entity_t,
            parent: tm_entity_t,
        ),
    >,
}
