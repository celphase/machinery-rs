/* automatically generated by rust-bindgen 0.59.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const TM_USE_STRHASH_TYPE: u32 = 1;
pub const TM_ALLOCATOR_API_NAME: &'static [u8; 17usize] = b"tm_allocator_api\0";
pub const TM_API_REGISTRY_API_NAME: &'static [u8; 20usize] = b"tm_api_registry_api\0";
pub const TM_APPLICATION_API_NAME: &'static [u8; 19usize] = b"tm_application_api\0";
pub const TM_ASSET_DATABASE_API_NAME: &'static [u8; 22usize] = b"tm_asset_database_api\0";
pub const TM_ASSET_IO_API_NAME: &'static [u8; 16usize] = b"tm_asset_io_api\0";
pub const TM_BASE_64_API_NAME: &'static [u8; 15usize] = b"tm_base_64_api\0";
pub const TM_BUDDY_ALLOCATOR_RAW_API_NAME: &'static [u8; 27usize] = b"tm_buddy_allocator_raw_api\0";
pub const TM_BUDDY_ALLOCATOR_API_NAME: &'static [u8; 23usize] = b"tm_buddy_allocator_api\0";
pub const TM_BUFFERS_API_NAME: &'static [u8; 15usize] = b"tm_buffers_api\0";
pub const TM_BUFFER_FORMAT_API_NAME: &'static [u8; 21usize] = b"tm_buffer_format_api\0";
pub const TM_CAMERA_API_NAME: &'static [u8; 14usize] = b"tm_camera_api\0";
pub const TM_COLLABORATION_API_NAME: &'static [u8; 21usize] = b"tm_collaboration_api\0";
pub const TM_COLLABORATION_P2P_API_NAME: &'static [u8; 25usize] = b"tm_collaboration_p2p_api\0";
pub const TM_CONFIG_API_NAME: &'static [u8; 14usize] = b"tm_config_api\0";
pub const TM_CORE_ASSET_INTERFACE_NAME: &'static [u8; 16usize] = b"tm_core_asset_i\0";
pub const TM_CORE_API_NAME: &'static [u8; 12usize] = b"tm_core_api\0";
pub const TM_CORE_IMPORTER_API_NAME: &'static [u8; 21usize] = b"tm_core_importer_api\0";
pub const TM_CRASH_RECOVERY_API_NAME: &'static [u8; 22usize] = b"tm_crash_recovery_api\0";
pub const TM_ERROR_API_NAME: &'static [u8; 13usize] = b"tm_error_api\0";
pub const TM_FEATURE_FLAGS_API_NAME: &'static [u8; 17usize] = b"tm_feature_flags\0";
pub const TM_GIT_IGNORE_API_NAME: &'static [u8; 18usize] = b"tm_git_ignore_api\0";
pub const TM_IMAGE_LOADER_API_NAME: &'static [u8; 20usize] = b"tm_image_loader_api\0";
pub const TM_INPUT_API_NAME: &'static [u8; 13usize] = b"tm_input_api\0";
pub const TM_INTEGRATION_TEST_INTERFACE_NAME: &'static [u8; 22usize] = b"tm_integration_test_i\0";
pub const TM_JOB_SYSTEM_API_NAME: &'static [u8; 18usize] = b"tm_job_system_api\0";
pub const TM_JSON_ERROR_STRING_LENGTH: u32 = 79;
pub const TM_JSON_API_NAME: &'static [u8; 12usize] = b"tm_json_api\0";
pub const TM_LOCALIZER_STRINGS_INTERFACE_NAME: &'static [u8; 23usize] = b"tm_localizer_strings_i\0";
pub const TM_LOCALIZER_API_NAME: &'static [u8; 17usize] = b"tm_localizer_api\0";
pub const TM_LOGGER_API_NAME: &'static [u8; 14usize] = b"tm_logger_api\0";
pub const TM_LZ4_API_NAME: &'static [u8; 11usize] = b"tm_lz4_api\0";
pub const TM_MATH_API_NAME: &'static [u8; 12usize] = b"tm_math_api\0";
pub const TM_MEMORY_TRACKER_SCOPE__NONE: u32 = 4294967295;
pub const TM_MEMORY_TRACKER_API_NAME: &'static [u8; 22usize] = b"tm_memory_tracker_api\0";
pub const TM_OS_API_NAME: &'static [u8; 10usize] = b"tm_os_api\0";
pub const TM_DIRECTORY_SEPARATOR: u8 = 47u8;
pub const TM_PATH_API_NAME: &'static [u8; 12usize] = b"tm_path_api\0";
pub const TM_PLUGINS_API_NAME: &'static [u8; 15usize] = b"tm_plugins_api\0";
pub const TM_TT_TYPE__PLUGIN: &'static [u8; 10usize] = b"tm_plugin\0";
pub const TM_PLUGIN_ASSETS_API_NAME: &'static [u8; 21usize] = b"tm_plugin_assets_api\0";
pub const TM_PLUGIN_INIT_INTERFACE_NAME: &'static [u8; 17usize] = b"tm_plugin_init_i\0";
pub const TM_PLUGIN_SHUTDOWN_INTERFACE_NAME: &'static [u8; 21usize] = b"tm_plugin_shutdown_i\0";
pub const TM_PLUGIN_TICK_INTERFACE_NAME: &'static [u8; 17usize] = b"tm_plugin_tick_i\0";
pub const TM_PLUGIN_SET_THE_TRUTH_INTERFACE_NAME: &'static [u8; 26usize] =
    b"tm_plugin_set_the_truth_i\0";
pub const TM_PROFILER_API_NAME: &'static [u8; 16usize] = b"tm_profiler_api\0";
pub const TM_PROGRESS_REPORT_API_NAME: &'static [u8; 23usize] = b"tm_progress_report_api\0";
pub const TM_RANDOM_API_NAME: &'static [u8; 14usize] = b"tm_random_api\0";
pub const TM_RUNTIME_DATA_REPOSITORY_API_NAME: &'static [u8; 31usize] =
    b"tm_runtime_data_repository_api\0";
pub const SHA1_DIGEST_SIZE: u32 = 20;
pub const TM_SPRINTF_API_NAME: &'static [u8; 15usize] = b"tm_sprintf_api\0";
pub const TM_STRING_API_NAME: &'static [u8; 14usize] = b"tm_string_api\0";
pub const TM_STRING_REPOSITORY_API_NAME: &'static [u8; 25usize] = b"tm_string_repository_api\0";
pub const TM_TASK_SYSTEM_API_NAME: &'static [u8; 19usize] = b"tm_task_system_api\0";
pub const TM_TEMP_ALLOCATOR_API_NAME: &'static [u8; 22usize] = b"tm_temp_allocator_api\0";
pub const TM_TT_TYPE__ANYTHING: &'static [u8; 12usize] = b"tm_anything\0";
pub const TM_THE_TRUTH_PROPERTY_NAME_LENGTH: u32 = 63;
pub const TM_THE_TRUTH_CREATE_TYPES_INTERFACE_NAME: &'static [u8; 28usize] =
    b"tm_the_truth_create_types_i\0";
pub const TM_THE_TRUTH_DESTROYED_INTERFACE_NAME: &'static [u8; 25usize] =
    b"tm_the_truth_destroyed_i\0";
pub const TM_THE_TRUTH_API_NAME: &'static [u8; 17usize] = b"tm_the_truth_api\0";
pub const TM_TT_TYPE__ASSET_ROOT: &'static [u8; 14usize] = b"tm_asset_root\0";
pub const TM_TT_TYPE__ASSET: &'static [u8; 9usize] = b"tm_asset\0";
pub const TM_TT_TYPE__ASSET_DIRECTORY: &'static [u8; 19usize] = b"tm_asset_directory\0";
pub const TM_TT_TYPE__ASSET_LABEL: &'static [u8; 15usize] = b"tm_asset_label\0";
pub const TM_ASSET_LABEL_INTERFACE_NAME: &'static [u8; 25usize] = b"tm_asset_label_interface\0";
pub const TM_THE_TRUTH_ASSETS_API_NAME: &'static [u8; 24usize] = b"tm_the_truth_assets_api\0";
pub const TM_THE_TRUTH_MIGRATION_INTERFACE_NAME: &'static [u8; 25usize] =
    b"tm_the_truth_migration_i\0";
pub const TM_THE_TRUTH_MIGRATION_API_NAME: &'static [u8; 27usize] = b"tm_the_truth_migration_api\0";
pub const TM_TT_TYPE__BOOL: &'static [u8; 8usize] = b"tm_bool\0";
pub const TM_TT_TYPE__UINT32_T: &'static [u8; 12usize] = b"tm_uint32_t\0";
pub const TM_TT_TYPE__UINT64_T: &'static [u8; 12usize] = b"tm_uint64_t\0";
pub const TM_TT_TYPE__FLOAT: &'static [u8; 9usize] = b"tm_float\0";
pub const TM_TT_TYPE__DOUBLE: &'static [u8; 10usize] = b"tm_double\0";
pub const TM_TT_TYPE__STRING: &'static [u8; 10usize] = b"tm_string\0";
pub const TM_TT_TYPE__VEC2: &'static [u8; 10usize] = b"tm_vec2_t\0";
pub const TM_TT_TYPE__VEC3: &'static [u8; 10usize] = b"tm_vec3_t\0";
pub const TM_TT_TYPE__VEC4: &'static [u8; 10usize] = b"tm_vec4_t\0";
pub const TM_TT_TYPE__POSITION: &'static [u8; 12usize] = b"tm_position\0";
pub const TM_TT_TYPE__ROTATION: &'static [u8; 12usize] = b"tm_rotation\0";
pub const TM_TT_TYPE__SCALE: &'static [u8; 9usize] = b"tm_scale\0";
pub const TM_TT_TYPE__COLOR_RGB: &'static [u8; 13usize] = b"tm_color_rgb\0";
pub const TM_TT_TYPE__COLOR_RGBA: &'static [u8; 14usize] = b"tm_color_rgba\0";
pub const TM_TT_TYPE__RECT: &'static [u8; 10usize] = b"tm_rect_t\0";
pub const TM_THE_TRUTH_COMMON_TYPES_API_NAME: &'static [u8; 30usize] =
    b"tm_the_truth_common_types_api\0";
pub const TM_UNICODE_API_NAME: &'static [u8; 15usize] = b"tm_unicode_api\0";
pub const TM_UNIT_TEST_INTERFACE_NAME: &'static [u8; 15usize] = b"tm_unit_test_i\0";
pub const TM_VISIBILITY_FLAGS_EDITOR_INTERFACE_NAME: &'static [u8; 28usize] =
    b"tm_visibility_editor_name_i\0";
pub const TM_VISIBILITY_FLAGS_CONTEXT_INTERFACE_NAME: &'static [u8; 24usize] =
    b"tm_visibility_context_o\0";
pub const TM_VISIBILITY_FLAGS_API_NAME: &'static [u8; 24usize] = b"tm_visibility_flags_api\0";
pub const TM_TT_TYPE__VISIBILITY_FLAG: &'static [u8; 19usize] = b"tm_visibility_flag\0";
pub const TM_WEB_SOCKET_PROTOCOL_API_NAME: &'static [u8; 27usize] = b"tm_web_socket_protocol_api\0";
pub const TM_WEB_TALKER_API_NAME: &'static [u8; 18usize] = b"tm_web_talker_api\0";
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_vec2_t {
    pub x: f32,
    pub y: f32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_vec3_t {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_vec4_t {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_mat44_t {
    pub xx: f32,
    pub xy: f32,
    pub xz: f32,
    pub xw: f32,
    pub yx: f32,
    pub yy: f32,
    pub yz: f32,
    pub yw: f32,
    pub zx: f32,
    pub zy: f32,
    pub zz: f32,
    pub zw: f32,
    pub wx: f32,
    pub wy: f32,
    pub wz: f32,
    pub ww: f32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_transform_t {
    pub pos: tm_vec3_t,
    pub rot: tm_vec4_t,
    pub scl: tm_vec3_t,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_rect_t {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_str_t {
    pub data: *const ::std::os::raw::c_char,
    pub size: u32,
    pub null_terminated: u32,
}
impl Default for tm_str_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_clock_o {
    pub opaque: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_uuid_t {
    pub a: u64,
    pub b: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_color_srgb_t {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_tt_type_t {
    pub u64_: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_tt_id_t {
    pub __bindgen_anon_1: tm_tt_id_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tm_tt_id_t__bindgen_ty_1 {
    pub u64_: u64,
    pub __bindgen_anon_1: tm_tt_id_t__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Default, Copy, Clone)]
pub struct tm_tt_id_t__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl tm_tt_id_t__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn type_(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u64) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn generation(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 22u8) as u64) }
    }
    #[inline]
    pub fn set_generation(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn index(&self) -> u64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u64) }
    }
    #[inline]
    pub fn set_index(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        type_: u64,
        generation: u64,
        index: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let type_: u64 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(10usize, 22u8, {
            let generation: u64 = unsafe { ::std::mem::transmute(generation) };
            generation as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let index: u64 = unsafe { ::std::mem::transmute(index) };
            index as u64
        });
        __bindgen_bitfield_unit
    }
}
impl Default for tm_tt_id_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tm_tt_id_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_tt_undo_scope_t {
    pub u64_: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_strhash_t {
    pub u64_: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_allocator_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_allocator_i {
    pub inst: *mut tm_allocator_o,
    pub mem_scope: u32,
    pub _padding_16: [::std::os::raw::c_char; 4usize],
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut tm_allocator_i,
            ptr: *mut ::std::os::raw::c_void,
            old_size: u64,
            new_size: u64,
            file: *const ::std::os::raw::c_char,
            line: u32,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
impl Default for tm_allocator_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_allocator_statistics_t {
    pub system_allocation_count: u64,
    pub system_allocated_bytes: u64,
    pub vm_reserved: u64,
    pub vm_committed: u64,
    pub system_churn_allocation_count: u64,
    pub system_churn_allocated_bytes: u64,
    pub vm_churn_committed: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_allocator_api {
    pub system: *mut tm_allocator_i,
    pub end_of_page: *mut tm_allocator_i,
    pub vm: *mut tm_allocator_i,
    pub statistics: *mut tm_allocator_statistics_t,
    pub create_child: ::std::option::Option<
        unsafe extern "C" fn(
            parent: *const tm_allocator_i,
            desc: *const ::std::os::raw::c_char,
        ) -> tm_allocator_i,
    >,
    pub destroy_child: ::std::option::Option<unsafe extern "C" fn(child: *const tm_allocator_i)>,
    pub destroy_child_allowing_leaks: ::std::option::Option<
        unsafe extern "C" fn(child: *const tm_allocator_i, max_leaked_bytes: u64),
    >,
    pub create_leaky_root_scope: ::std::option::Option<
        unsafe extern "C" fn(
            parent: *const tm_allocator_i,
            desc: *const ::std::os::raw::c_char,
        ) -> tm_allocator_i,
    >,
    pub create_fixed_vm: ::std::option::Option<
        unsafe extern "C" fn(reserve_size: u64, mem_scope: u32) -> tm_allocator_i,
    >,
}
impl Default for tm_allocator_api {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_api_registry_listener_i {
    pub ud: *mut ::std::os::raw::c_void,
    pub add_implementation: ::std::option::Option<
        unsafe extern "C" fn(
            ud: *mut ::std::os::raw::c_void,
            name: *const ::std::os::raw::c_char,
            implementation: *const ::std::os::raw::c_void,
        ),
    >,
}
impl Default for tm_api_registry_listener_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_api_registry_api {
    pub set: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            api: *const ::std::os::raw::c_void,
            bytes: u32,
        ),
    >,
    pub remove: ::std::option::Option<unsafe extern "C" fn(api: *const ::std::os::raw::c_void)>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
    >,
    pub get_optional: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void,
    >,
    pub add_implementation: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            implementation: *const ::std::os::raw::c_void,
        ),
    >,
    pub remove_implementation: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            implementation: *const ::std::os::raw::c_void,
        ),
    >,
    pub implementations: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            count: *mut u32,
        ) -> *mut *mut ::std::os::raw::c_void,
    >,
    pub add_listener:
        ::std::option::Option<unsafe extern "C" fn(listener: *const tm_api_registry_listener_i)>,
    pub static_variable: ::std::option::Option<
        unsafe extern "C" fn(
            id: tm_strhash_t,
            size: u32,
            file: *const ::std::os::raw::c_char,
            line: u32,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub log_missing_apis: ::std::option::Option<unsafe extern "C" fn()>,
}
pub type tm_load_function =
    ::std::option::Option<unsafe extern "C" fn(reg: *mut tm_api_registry_api, load: bool)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_ui_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_draw2d_font_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_color_space_desc_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_application_o {
    _unused: [u8; 0],
}
pub type tm_application_modal_f = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        ui: *mut tm_ui_o,
        rect: tm_rect_t,
        font: *const tm_draw2d_font_t,
        font_scale: f32,
        ui_has_focus: bool,
        delta_time: f32,
    ) -> bool,
>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_application_api {
    pub application: ::std::option::Option<unsafe extern "C" fn() -> *mut tm_application_o>,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *mut *mut ::std::os::raw::c_char,
        ) -> *mut tm_application_o,
    >,
    pub tick: ::std::option::Option<unsafe extern "C" fn(app: *mut tm_application_o) -> bool>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(app: *mut tm_application_o)>,
    pub set_modal: ::std::option::Option<
        unsafe extern "C" fn(
            app: *mut tm_application_o,
            f: tm_application_modal_f,
            data: *mut ::std::os::raw::c_void,
        ),
    >,
    pub is_modal: ::std::option::Option<unsafe extern "C" fn(app: *const tm_application_o) -> bool>,
    pub asset_root:
        ::std::option::Option<unsafe extern "C" fn(app: *const tm_application_o) -> tm_tt_id_t>,
    pub load_core:
        ::std::option::Option<unsafe extern "C" fn(app: *const tm_application_o) -> bool>,
    pub update_core:
        ::std::option::Option<unsafe extern "C" fn(app: *const tm_application_o) -> bool>,
    pub exit: ::std::option::Option<unsafe extern "C" fn(app: *mut tm_application_o)>,
    pub set_cursor_hidden:
        ::std::option::Option<unsafe extern "C" fn(app: *mut tm_application_o, hidden: bool)>,
    pub viewer_manager: ::std::option::Option<
        unsafe extern "C" fn(app: *mut tm_application_o) -> *mut tm_viewer_manager_o,
    >,
    pub default_render_pipeline_api: ::std::option::Option<
        unsafe extern "C" fn(app: *mut tm_application_o) -> *mut tm_render_pipeline_api,
    >,
    pub ui_scale_factor: ::std::option::Option<
        unsafe extern "C" fn(app: *mut tm_application_o, ui: *mut tm_ui_o) -> f32,
    >,
    pub data_dir: ::std::option::Option<
        unsafe extern "C" fn(app: *mut tm_application_o) -> *const ::std::os::raw::c_char,
    >,
    pub color_space: ::std::option::Option<
        unsafe extern "C" fn(
            app: *const tm_application_o,
            color_space: *mut tm_color_space_desc_t,
            format: *mut u32,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_asset_database_config_t {
    pub allocator: *mut tm_allocator_i,
    pub fs: *mut tm_os_file_system_api,
    pub file_io: *mut tm_os_file_io_api,
}
impl Default for tm_asset_database_config_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_asset_dabase_saved_item_t {
    pub uuid: tm_uuid_t,
    pub is_directory: bool,
    pub _padding_30: [::std::os::raw::c_char; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_asset_database_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_asset_database_api {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            file: *const ::std::os::raw::c_char,
            tt: *mut tm_the_truth_o,
            config: *const tm_asset_database_config_t,
        ) -> *mut tm_asset_database_o,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            file: *const ::std::os::raw::c_char,
            tt: *mut tm_the_truth_o,
            config: *const tm_asset_database_config_t,
        ) -> *mut tm_asset_database_o,
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(db: *mut tm_asset_database_o)>,
    pub save_modified: ::std::option::Option<
        unsafe extern "C" fn(db: *mut tm_asset_database_o, asset_root: tm_tt_id_t),
    >,
    pub save_modified_except: ::std::option::Option<
        unsafe extern "C" fn(
            db: *mut tm_asset_database_o,
            asset_root: tm_tt_id_t,
            ignore: *mut tm_tt_id_t,
            num_ignore: u32,
        ),
    >,
    pub save_asset: ::std::option::Option<
        unsafe extern "C" fn(db: *mut tm_asset_database_o, asset: tm_tt_id_t),
    >,
    pub delete_asset: ::std::option::Option<
        unsafe extern "C" fn(db: *mut tm_asset_database_o, asset: tm_tt_id_t),
    >,
    pub revert_asset: ::std::option::Option<
        unsafe extern "C" fn(
            db: *mut tm_asset_database_o,
            asset: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ) -> bool,
    >,
    pub load: ::std::option::Option<
        unsafe extern "C" fn(db: *mut tm_asset_database_o, load_fraction: *mut f32) -> tm_tt_id_t,
    >,
    pub saved_name: ::std::option::Option<
        unsafe extern "C" fn(
            db: *mut tm_asset_database_o,
            item: tm_uuid_t,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub saved_directory: ::std::option::Option<
        unsafe extern "C" fn(db: *mut tm_asset_database_o, item: tm_uuid_t) -> tm_uuid_t,
    >,
    pub saved_version: ::std::option::Option<
        unsafe extern "C" fn(db: *mut tm_asset_database_o, asset: tm_uuid_t) -> u64,
    >,
    pub all_saved_items: ::std::option::Option<
        unsafe extern "C" fn(
            db: *mut tm_asset_database_o,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_asset_dabase_saved_item_t,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_asset_io_import {
    pub allocator: *mut tm_allocator_i,
    pub tt: *mut tm_the_truth_o,
    pub reimport_into: tm_tt_id_t,
    pub target_dir: tm_tt_id_t,
    pub asset_root: tm_tt_id_t,
    pub ui: *mut tm_ui_o,
    pub asset_browser: tm_tt_id_t,
    pub asset_browser_version_at_start: u64,
    pub undo_scope: tm_tt_undo_scope_t,
}
impl Default for tm_asset_io_import {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_asset_io_i {
    pub inst: *mut tm_asset_io_o,
    pub enabled: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_asset_io_o) -> bool>,
    pub can_import: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_asset_io_o,
            extension: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub can_reimport: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_asset_io_o,
            tt: *mut tm_the_truth_o,
            asset: tm_tt_id_t,
        ) -> bool,
    >,
    pub importer_extensions_string: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_asset_io_o,
            output: *mut *mut ::std::os::raw::c_char,
            ta: *mut tm_temp_allocator_i,
            separator: *const ::std::os::raw::c_char,
        ),
    >,
    pub importer_description_string: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_asset_io_o,
            output: *mut *mut ::std::os::raw::c_char,
            ta: *mut tm_temp_allocator_i,
            separator: *const ::std::os::raw::c_char,
        ),
    >,
    pub import_asset: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_asset_io_o,
            file: *const ::std::os::raw::c_char,
            import: *const tm_asset_io_import,
        ) -> u64,
    >,
    pub can_export: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_asset_io_o,
            tt: *mut tm_the_truth_o,
            asset: tm_tt_id_t,
        ) -> bool,
    >,
    pub exporter_extension: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_asset_io_o,
            tt: *mut tm_the_truth_o,
            asset: tm_tt_id_t,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub export_asset: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_asset_io_o,
            file: *const ::std::os::raw::c_char,
            tt: *mut tm_the_truth_o,
            asset_root: tm_tt_id_t,
            asset: tm_tt_id_t,
        ),
    >,
}
impl Default for tm_asset_io_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_asset_io_api {
    pub add_asset_io: ::std::option::Option<unsafe extern "C" fn(loader: *mut tm_asset_io_i)>,
    pub remove_asset_io: ::std::option::Option<unsafe extern "C" fn(loader: *mut tm_asset_io_i)>,
    pub importer: ::std::option::Option<
        unsafe extern "C" fn(extension: *const ::std::os::raw::c_char) -> *mut tm_asset_io_i,
    >,
    pub reimporter: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, asset: tm_tt_id_t) -> *mut tm_asset_io_i,
    >,
    pub exporter: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, asset: tm_tt_id_t) -> *mut tm_asset_io_i,
    >,
    pub io_interfaces:
        ::std::option::Option<unsafe extern "C" fn(interfaces: *mut *mut tm_asset_io_i) -> u32>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_base_64_api {
    pub encoded_size: ::std::option::Option<unsafe extern "C" fn(raw_size: u64) -> u64>,
    pub encode: ::std::option::Option<
        unsafe extern "C" fn(
            encoded: *mut ::std::os::raw::c_char,
            raw: *const u8,
            raw_size: u64,
        ) -> u64,
    >,
    pub decoded_size: ::std::option::Option<
        unsafe extern "C" fn(encoded: *const ::std::os::raw::c_char, encoded_size: u64) -> u64,
    >,
    pub decode: ::std::option::Option<
        unsafe extern "C" fn(
            raw: *mut u8,
            encoded: *const ::std::os::raw::c_char,
            encoded_size: u64,
        ) -> u64,
    >,
}
pub const TM_BOUNDING_VOLUME_TYPE_SPHERE: tm_bounding_volume_type = 0;
pub const TM_BOUNDING_VOLUME_TYPE_BOX: tm_bounding_volume_type = 1;
pub type tm_bounding_volume_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_bounding_volume_sphere_t {
    pub visibility_mask: u64,
    pub culling_disabled: bool,
    pub _padding_18: [::std::os::raw::c_char; 3usize],
    pub position: tm_vec3_t,
    pub radius: f32,
    pub _padding_21: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_bounding_volume_box_t {
    pub visibility_mask: u64,
    pub culling_disabled: bool,
    pub _padding_29: [::std::os::raw::c_char; 3usize],
    pub tm: tm_mat44_t,
    pub min: tm_vec3_t,
    pub max: tm_vec3_t,
    pub _padding_33: [::std::os::raw::c_char; 4usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_buddy_allocator_raw_api {
    pub init:
        ::std::option::Option<unsafe extern "C" fn(buffer: *mut u8, size: u32, block_size: u32)>,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut u8,
            ptr: *mut ::std::os::raw::c_void,
            old_size: u64,
            new_size: u64,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_buddy_allocator_api {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            backing: *mut tm_allocator_i,
            initial_size: u32,
            block_size: u32,
        ) -> *mut tm_allocator_i,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(a: *mut tm_allocator_i)>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_buffers_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_buffers_i {
    pub inst: *mut tm_buffers_o,
    pub allocate: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_buffers_o,
            size: u64,
            initialize: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub add: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_buffers_o,
            data: *const ::std::os::raw::c_void,
            size: u64,
            hash: u64,
        ) -> u32,
    >,
    pub retain: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_buffers_o, id: u32)>,
    pub release: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_buffers_o, id: u32)>,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *const tm_buffers_o,
            id: u32,
            size: *mut u64,
        ) -> *const ::std::os::raw::c_void,
    >,
    pub size:
        ::std::option::Option<unsafe extern "C" fn(inst: *const tm_buffers_o, id: u32) -> u64>,
    pub hash:
        ::std::option::Option<unsafe extern "C" fn(inst: *const tm_buffers_o, id: u32) -> u64>,
    pub lookup:
        ::std::option::Option<unsafe extern "C" fn(inst: *const tm_buffers_o, hash: u64) -> u32>,
    pub debug__refcount:
        ::std::option::Option<unsafe extern "C" fn(inst: *const tm_buffers_o, id: u32) -> u32>,
}
impl Default for tm_buffers_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_streamable_buffers_i {
    pub __bindgen_padding_0: [u64; 10usize],
    pub map: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_buffers_o,
            path: *const ::std::os::raw::c_char,
            offset: u64,
            size: u64,
            hash: u64,
        ) -> u32,
    >,
    pub map_database: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_buffers_o,
            hash: u64,
            size: u64,
            file: *const tm_file_o,
            page_size: u32,
            page_header_size: u32,
            first_page: u32,
        ) -> u32,
    >,
    pub is_mapped:
        ::std::option::Option<unsafe extern "C" fn(inst: *const tm_buffers_o, id: u32) -> bool>,
    pub is_loaded:
        ::std::option::Option<unsafe extern "C" fn(inst: *const tm_buffers_o, id: u32) -> bool>,
    pub unload: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_buffers_o, id: u32)>,
    pub save: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_buffers_o,
            id: u32,
            path: *const ::std::os::raw::c_char,
            offset: u64,
        ),
    >,
    pub background_load_all:
        ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_buffers_o, percentage: *mut f32)>,
    pub ensure_all_loaded: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_buffers_o)>,
    pub set_io: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_buffers_o, io: *mut tm_os_file_io_api),
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_buffers_api {
    pub create:
        ::std::option::Option<unsafe extern "C" fn(a: *mut tm_allocator_i) -> *mut tm_buffers_i>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(i: *mut tm_buffers_i)>,
    pub create_streamable: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut tm_allocator_i,
            io: *mut tm_os_file_io_api,
        ) -> *mut tm_streamable_buffers_i,
    >,
    pub destroy_streamable:
        ::std::option::Option<unsafe extern "C" fn(i: *mut tm_streamable_buffers_i)>,
}
pub const TM_BUFFER_COMPONENT_TYPE_FLOAT: tm_buffer_component_type = 0;
pub const TM_BUFFER_COMPONENT_TYPE_NORMALIZED_INTEGER: tm_buffer_component_type = 1;
pub const TM_BUFFER_COMPONENT_TYPE_INTEGER: tm_buffer_component_type = 2;
pub const TM_BUFFER_COMPONENT_TYPE_DEPTH_STENCIL: tm_buffer_component_type = 3;
pub type tm_buffer_component_type = ::std::os::raw::c_int;
pub const TM_BUFFER_COMPRESSION_FORMAT_BC1_RGB: tm_buffer_compression_format = 0;
pub const TM_BUFFER_COMPRESSION_FORMAT_BC1_RGBA: tm_buffer_compression_format = 1;
pub const TM_BUFFER_COMPRESSION_FORMAT_BC2: tm_buffer_compression_format = 2;
pub const TM_BUFFER_COMPRESSION_FORMAT_BC3: tm_buffer_compression_format = 3;
pub const TM_BUFFER_COMPRESSION_FORMAT_BC4: tm_buffer_compression_format = 4;
pub const TM_BUFFER_COMPRESSION_FORMAT_BC5: tm_buffer_compression_format = 5;
pub const TM_BUFFER_COMPRESSION_FORMAT_BC6H_U: tm_buffer_compression_format = 6;
pub const TM_BUFFER_COMPRESSION_FORMAT_BC6H_S: tm_buffer_compression_format = 7;
pub const TM_BUFFER_COMPRESSION_FORMAT_BC7: tm_buffer_compression_format = 8;
pub const TM_BUFFER_COMPRESSION_FORMAT_ETC2_RGB: tm_buffer_compression_format = 9;
pub const TM_BUFFER_COMPRESSION_FORMAT_ETC2_RGBA: tm_buffer_compression_format = 10;
pub const TM_BUFFER_COMPRESSION_FORMAT_MAX_FORMATS: tm_buffer_compression_format = 11;
pub type tm_buffer_compression_format = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_buffer_format_api {
    pub encode_uncompressed_format: ::std::option::Option<
        unsafe extern "C" fn(
            component_type: tm_buffer_component_type,
            sign: bool,
            bits_x: u8,
            bits_y: u8,
            bits_z: u8,
            bits_w: u8,
        ) -> u32,
    >,
    pub encode_compressed_format: ::std::option::Option<
        unsafe extern "C" fn(compression_type: tm_buffer_compression_format) -> u32,
    >,
    pub is_compressed: ::std::option::Option<unsafe extern "C" fn(format: u32) -> bool>,
    pub decode_uncompressed: ::std::option::Option<
        unsafe extern "C" fn(
            format: u32,
            component_type: *mut tm_buffer_component_type,
            sign: *mut bool,
            bits_x: *mut u8,
            bits_y: *mut u8,
            bits_z: *mut u8,
            bits_w: *mut u8,
        ) -> bool,
    >,
    pub decode_compression_format: ::std::option::Option<
        unsafe extern "C" fn(
            format: u32,
            compression_format: *mut tm_buffer_compression_format,
        ) -> bool,
    >,
    pub bits_per_element: ::std::option::Option<unsafe extern "C" fn(format: u32) -> u32>,
    pub num_components: ::std::option::Option<unsafe extern "C" fn(format: u32) -> u32>,
    pub human_readable: ::std::option::Option<
        unsafe extern "C" fn(
            format: u32,
            ta: *mut tm_temp_allocator_i,
        ) -> *const ::std::os::raw::c_char,
    >,
}
pub const TM_CAMERA_TRANSFORM_DEFAULT: tm_camera_transform = 0;
pub const TM_CAMERA_TRANSFORM_EYE_LEFT: tm_camera_transform = 1;
pub const TM_CAMERA_TRANSFORM_EYE_RIGHT: tm_camera_transform = 2;
pub const TM_CAMERA_TRANSFORM_MAX_TRANSFORMS: tm_camera_transform = 3;
pub type tm_camera_transform = ::std::os::raw::c_int;
pub const TM_CAMERA_MODE_PERSPECTIVE: tm_camera_mode = 0;
pub const TM_CAMERA_MODE_ORTHOGRAPHIC: tm_camera_mode = 1;
pub type tm_camera_mode = ::std::os::raw::c_int;
pub const TM_CAMERA_FRUSTUM_PLANE_LEFT: tm_camera_frustum_planes = 0;
pub const TM_CAMERA_FRUSTUM_PLANE_RIGHT: tm_camera_frustum_planes = 1;
pub const TM_CAMERA_FRUSTUM_PLANE_BOTTOM: tm_camera_frustum_planes = 2;
pub const TM_CAMERA_FRUSTUM_PLANE_TOP: tm_camera_frustum_planes = 3;
pub const TM_CAMERA_FRUSTUM_PLANE_NEAR: tm_camera_frustum_planes = 4;
pub const TM_CAMERA_FRUSTUM_PLANE_FAR: tm_camera_frustum_planes = 5;
pub const TM_CAMERA_FRUSTUM_PLANE_MAX_PLANES: tm_camera_frustum_planes = 6;
pub type tm_camera_frustum_planes = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_camera_t {
    pub projection: [tm_mat44_t; 3usize],
    pub view: [tm_mat44_t; 3usize],
    pub mode: tm_camera_mode,
    pub near_plane: f32,
    pub far_plane: f32,
    pub vertical_fov: f32,
    pub box_height: f32,
    pub shutter_speed: f32,
    pub aperture: f32,
    pub iso: f32,
}
impl Default for tm_camera_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_camera_api {
    pub view_from_transform: ::std::option::Option<
        unsafe extern "C" fn(view: *mut tm_mat44_t, tm: *const tm_transform_t) -> *mut tm_mat44_t,
    >,
    pub transform_from_view: ::std::option::Option<
        unsafe extern "C" fn(
            tm: *mut tm_transform_t,
            view: *const tm_mat44_t,
        ) -> *mut tm_transform_t,
    >,
    pub projection_from_frustum: ::std::option::Option<
        unsafe extern "C" fn(
            proj: *mut tm_mat44_t,
            left: f32,
            right: f32,
            bottom: f32,
            top: f32,
            near: f32,
            far: f32,
        ) -> *mut tm_mat44_t,
    >,
    pub projection_from_fov: ::std::option::Option<
        unsafe extern "C" fn(
            proj: *mut tm_mat44_t,
            near_plane: f32,
            far_plane: f32,
            vertical_fov: f32,
            aspect: f32,
        ) -> *mut tm_mat44_t,
    >,
    pub orthographic_from_frustum: ::std::option::Option<
        unsafe extern "C" fn(
            proj: *mut tm_mat44_t,
            left: f32,
            right: f32,
            bottom: f32,
            top: f32,
            near: f32,
            far: f32,
        ) -> *mut tm_mat44_t,
    >,
    pub orthographics_from_dimensions: ::std::option::Option<
        unsafe extern "C" fn(
            proj: *mut tm_mat44_t,
            near_plane: f32,
            far_plane: f32,
            width: f32,
            height: f32,
        ) -> *mut tm_mat44_t,
    >,
    pub projection_from_camera: ::std::option::Option<
        unsafe extern "C" fn(
            camera: *mut tm_camera_t,
            transform: tm_camera_transform,
            aspect: f32,
        ) -> *mut tm_mat44_t,
    >,
    pub update_free_flight: ::std::option::Option<
        unsafe extern "C" fn(tm: *mut tm_transform_t, t: tm_vec3_t, r: tm_vec2_t),
    >,
    pub update_pan: ::std::option::Option<
        unsafe extern "C" fn(
            tm: *mut tm_transform_t,
            focus_position: *mut tm_vec3_t,
            pan: tm_vec2_t,
        ),
    >,
    pub update_maya: ::std::option::Option<
        unsafe extern "C" fn(
            tm: *mut tm_transform_t,
            focus_position: tm_vec3_t,
            zoom: f32,
            rot: tm_vec2_t,
        ),
    >,
    pub world_to_screen: ::std::option::Option<
        unsafe extern "C" fn(
            camera: *const tm_camera_t,
            transform: tm_camera_transform,
            viewport: tm_rect_t,
            world: *const tm_vec3_t,
            screen: *mut tm_vec3_t,
            n: u32,
        ) -> *mut tm_vec3_t,
    >,
    pub screen_to_world: ::std::option::Option<
        unsafe extern "C" fn(
            camera: *const tm_camera_t,
            transform: tm_camera_transform,
            viewport: tm_rect_t,
            screen: *const tm_vec3_t,
            world: *mut tm_vec3_t,
            n: u32,
        ) -> *mut tm_vec3_t,
    >,
    pub meters_per_pixel: ::std::option::Option<
        unsafe extern "C" fn(distance: f32, vertical_fov: f32, viewport_height: f32) -> f32,
    >,
    pub default_camera: ::std::option::Option<unsafe extern "C" fn() -> *const tm_camera_t>,
    pub frustum_planes_from_view_projection: ::std::option::Option<
        unsafe extern "C" fn(
            view: *const tm_mat44_t,
            projection: *const tm_mat44_t,
            frustum_planes: *mut tm_vec4_t,
        ),
    >,
}
pub const TM_COLLABORATION_STATUS_DISCONNECTED: tm_collaboration_status = 0;
pub const TM_COLLABORATION_STATUS_HOST_STARTING: tm_collaboration_status = 1;
pub const TM_COLLABORATION_STATUS_HOST: tm_collaboration_status = 2;
pub const TM_COLLABORATION_STATUS_CONNECTING: tm_collaboration_status = 3;
pub const TM_COLLABORATION_STATUS_CLIENT: tm_collaboration_status = 4;
pub const TM_COLLABORATION_STATUS_ERROR: tm_collaboration_status = 5;
pub type tm_collaboration_status = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_collaboration_config_i {
    pub tt: *mut tm_the_truth_o,
    pub ud: *mut ::std::os::raw::c_void,
    pub host_init: ::std::option::Option<unsafe extern "C" fn(ud: *mut ::std::os::raw::c_void)>,
    pub client_init: ::std::option::Option<unsafe extern "C" fn(ud: *mut ::std::os::raw::c_void)>,
    pub host_save_state: ::std::option::Option<
        unsafe extern "C" fn(
            ud: *mut ::std::os::raw::c_void,
            carray: *mut *mut ::std::os::raw::c_char,
            a: *mut tm_allocator_i,
        ),
    >,
    pub client_reset_truth: ::std::option::Option<
        unsafe extern "C" fn(ud: *mut ::std::os::raw::c_void) -> *mut tm_the_truth_o,
    >,
    pub client_decompress_state: ::std::option::Option<
        unsafe extern "C" fn(
            app_ud: *mut ::std::os::raw::c_void,
            state: *const ::std::os::raw::c_char,
            size: u64,
            allocator: *mut tm_allocator_i,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub client_buffer_hashes: ::std::option::Option<
        unsafe extern "C" fn(
            ud: *mut ::std::os::raw::c_void,
            state: *const ::std::os::raw::c_char,
            size: u64,
            count: *mut u64,
        ) -> *const u64,
    >,
    pub client_load_state: ::std::option::Option<
        unsafe extern "C" fn(
            ud: *mut ::std::os::raw::c_void,
            state: *const ::std::os::raw::c_char,
            size: u64,
        ) -> bool,
    >,
    pub cache_dir: *const ::std::os::raw::c_char,
}
impl Default for tm_collaboration_config_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TM_COLLABORATION_SESSION_TYPE_NONE: tm_collaboration_session_type = 0;
pub const TM_COLLABORATION_SESSION_TYPE_HOST: tm_collaboration_session_type = 1;
pub const TM_COLLABORATION_SESSION_TYPE_CLIENT: tm_collaboration_session_type = 2;
pub type tm_collaboration_session_type = ::std::os::raw::c_int;
pub const TM_COLLABORATION_SESSION_STATUS_DISCONNECTED: tm_collaboration_session_status = 0;
pub const TM_COLLABORATION_SESSION_STATUS_CONNECTING: tm_collaboration_session_status = 1;
pub const TM_COLLABORATION_SESSION_STATUS_CONNECTED: tm_collaboration_session_status = 2;
pub const TM_COLLABORATION_SESSION_STATUS_ERROR: tm_collaboration_session_status = 3;
pub type tm_collaboration_session_status = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_collaboration_session_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_collaboration_session_i {
    pub inst: *mut tm_collaboration_session_o,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_collaboration_session_o)>,
    pub architecture: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_collaboration_session_o) -> tm_strhash_t,
    >,
    pub host_id:
        ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_collaboration_session_o) -> u64>,
    pub get_client_request: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_collaboration_session_o, client_id: *mut u64) -> bool,
    >,
    pub accept_client: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_collaboration_session_o, client_id: u64),
    >,
    pub send: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_collaboration_session_o,
            client_id: u64,
            buf: *const u8,
            size: u64,
        ),
    >,
    pub flush: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_collaboration_session_o)>,
    pub update: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_collaboration_session_o)>,
    pub get_package_data: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_collaboration_session_o,
            client_id: u64,
            data: *mut u8,
            size: *mut u64,
        ) -> bool,
    >,
    pub close_client: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_collaboration_session_o, client_id: u64),
    >,
    pub send_ping: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_collaboration_session_o, client_id: u64),
    >,
    pub type_: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_collaboration_session_o,
        ) -> tm_collaboration_session_type,
    >,
    pub status: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_collaboration_session_o,
        ) -> tm_collaboration_session_status,
    >,
    pub is_client_alive: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_collaboration_session_o, client_id: u64) -> bool,
    >,
    pub receive_progress: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *const tm_collaboration_session_o,
            bytes: *mut u64,
            total: *mut u64,
        ) -> bool,
    >,
    pub status_message: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_collaboration_session_o,
            buf: *mut ::std::os::raw::c_char,
            max_size: u32,
        ),
    >,
}
impl Default for tm_collaboration_session_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_collaboration_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_collaboration_api {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut tm_allocator_i,
            config: *const tm_collaboration_config_i,
        ) -> *mut tm_collaboration_o,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(coll: *mut tm_collaboration_o)>,
    pub status: ::std::option::Option<
        unsafe extern "C" fn(coll: *const tm_collaboration_o) -> tm_collaboration_status,
    >,
    pub is_downloading: ::std::option::Option<
        unsafe extern "C" fn(
            coll: *const tm_collaboration_o,
            bytes: *mut u64,
            total: *mut u64,
        ) -> bool,
    >,
    pub set_session: ::std::option::Option<
        unsafe extern "C" fn(
            coll: *mut tm_collaboration_o,
            session: *const tm_collaboration_session_i,
        ),
    >,
    pub session: ::std::option::Option<
        unsafe extern "C" fn(coll: *mut tm_collaboration_o) -> *mut tm_collaboration_session_i,
    >,
    pub disconnect: ::std::option::Option<unsafe extern "C" fn(coll: *mut tm_collaboration_o)>,
    pub update: ::std::option::Option<unsafe extern "C" fn(coll: *mut tm_collaboration_o)>,
    pub handle: ::std::option::Option<
        unsafe extern "C" fn(coll: *const tm_collaboration_o) -> *const ::std::os::raw::c_char,
    >,
    pub set_handle: ::std::option::Option<
        unsafe extern "C" fn(c: *mut tm_collaboration_o, handle: *mut ::std::os::raw::c_char),
    >,
    pub host_handle: ::std::option::Option<
        unsafe extern "C" fn(c: *const tm_collaboration_o) -> *const ::std::os::raw::c_char,
    >,
    pub num_clients:
        ::std::option::Option<unsafe extern "C" fn(coll: *const tm_collaboration_o) -> u32>,
    pub client_handle: ::std::option::Option<
        unsafe extern "C" fn(
            coll: *const tm_collaboration_o,
            i: u32,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub all_handles: ::std::option::Option<
        unsafe extern "C" fn(
            coll: *const tm_collaboration_o,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut *const ::std::os::raw::c_char,
    >,
    pub send_chat: ::std::option::Option<
        unsafe extern "C" fn(coll: *mut tm_collaboration_o, msg: *const ::std::os::raw::c_char),
    >,
    pub num_chat_messages:
        ::std::option::Option<unsafe extern "C" fn(coll: *const tm_collaboration_o) -> u32>,
    pub chat_message: ::std::option::Option<
        unsafe extern "C" fn(
            coll: *const tm_collaboration_o,
            i: u32,
            sender: *mut *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub resynchronize_state: ::std::option::Option<
        unsafe extern "C" fn(coll: *mut tm_collaboration_o, tt: *mut tm_the_truth_o),
    >,
    pub send_test_packages: ::std::option::Option<
        unsafe extern "C" fn(coll: *mut tm_collaboration_o, size: u64, num: u32),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_collaboration_p2p_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_collaboration_discovered_host_t {
    pub address: *const tm_socket_address_t,
    pub name: *const ::std::os::raw::c_char,
}
impl Default for tm_collaboration_discovered_host_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_collaboration_p2p_api {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            coll: *mut tm_collaboration_o,
            allocator: *mut tm_allocator_i,
        ) -> *mut tm_collaboration_p2p_o,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(coll_p2p: *mut tm_collaboration_p2p_o)>,
    pub update: ::std::option::Option<unsafe extern "C" fn(coll_p2p: *mut tm_collaboration_p2p_o)>,
    pub host: ::std::option::Option<
        unsafe extern "C" fn(coll_p2p: *mut tm_collaboration_p2p_o, port: u32, use_upnp: bool),
    >,
    pub connect: ::std::option::Option<
        unsafe extern "C" fn(
            coll_p2p: *mut tm_collaboration_p2p_o,
            address: *const tm_socket_address_t,
        ),
    >,
    pub discovered_lan_hosts: ::std::option::Option<
        unsafe extern "C" fn(
            coll_p2p: *const tm_collaboration_p2p_o,
            hosts: *mut tm_collaboration_discovered_host_t,
            max_hosts: u32,
        ) -> u32,
    >,
}
pub const TM_CONFIG_TYPE_NULL: tm_config_type = 0;
pub const TM_CONFIG_TYPE_FALSE: tm_config_type = 1;
pub const TM_CONFIG_TYPE_TRUE: tm_config_type = 2;
pub const TM_CONFIG_TYPE_NUMBER: tm_config_type = 3;
pub const TM_CONFIG_TYPE_STRING: tm_config_type = 4;
pub const TM_CONFIG_TYPE_ARRAY: tm_config_type = 5;
pub const TM_CONFIG_TYPE_OBJECT: tm_config_type = 6;
pub type tm_config_type = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct tm_config_item_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl tm_config_item_t {
    #[inline]
    pub fn type_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn offset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_offset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(type_: u32, offset: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let offset: u32 = unsafe { ::std::mem::transmute(offset) };
            offset as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_config_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_config_i {
    pub inst: *mut tm_config_o,
    pub root:
        ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_config_o) -> tm_config_item_t>,
    pub to_number: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_config_o, item: tm_config_item_t) -> f64,
    >,
    pub to_string: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            item: tm_config_item_t,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub to_array: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            item: tm_config_item_t,
            items: *mut *mut tm_config_item_t,
        ) -> u32,
    >,
    pub to_object: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            item: tm_config_item_t,
            keys: *mut *mut tm_config_item_t,
            values: *mut *mut tm_config_item_t,
        ) -> u32,
    >,
    pub add_number: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_config_o, n: f64) -> tm_config_item_t,
    >,
    pub add_string: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            s: *const ::std::os::raw::c_char,
        ) -> tm_config_item_t,
    >,
    pub add_array: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            items: *const tm_config_item_t,
            size: u32,
        ) -> tm_config_item_t,
    >,
    pub add_object: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            keys: *const tm_config_item_t,
            values: *const tm_config_item_t,
            size: u32,
        ) -> tm_config_item_t,
    >,
    pub add_object_with_string_keys: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            keys: *mut *const ::std::os::raw::c_char,
            values: *const tm_config_item_t,
            size: u32,
        ) -> tm_config_item_t,
    >,
    pub array_set: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            array: tm_config_item_t,
            i: u32,
            item: tm_config_item_t,
        ),
    >,
    pub array_push: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            array: tm_config_item_t,
            item: tm_config_item_t,
        ),
    >,
    pub object_get: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            object: tm_config_item_t,
            key_hash: tm_strhash_t,
        ) -> tm_config_item_t,
    >,
    pub object_update: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            object: tm_config_item_t,
            key_hash: tm_strhash_t,
            value: tm_config_item_t,
        ),
    >,
    pub object_add: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            object: tm_config_item_t,
            key: *const ::std::os::raw::c_char,
            value: tm_config_item_t,
        ),
    >,
    pub set_root:
        ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_config_o, root: tm_config_item_t)>,
    pub copy:
        ::std::option::Option<unsafe extern "C" fn(dst: *mut tm_config_o, src: *mut tm_config_o)>,
    pub allocator:
        ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_config_o) -> *mut tm_allocator_i>,
    pub validate_object: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_config_o,
            object: tm_config_item_t,
            object_display_name: *const ::std::os::raw::c_char,
            valid_child_keys: *mut *const ::std::os::raw::c_char,
            num_valid_child_keys: u32,
        ) -> bool,
    >,
}
impl Default for tm_config_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_config_api {
    pub create:
        ::std::option::Option<unsafe extern "C" fn(a: *mut tm_allocator_i) -> *mut tm_config_i>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(cdi: *mut tm_config_i)>,
    pub c_null: tm_config_item_t,
    pub c_false: tm_config_item_t,
    pub c_true: tm_config_item_t,
    pub _padding_182: [::std::os::raw::c_char; 4usize],
}
pub const TM_CORE_CREATE_POLICY__CREATE: tm_core_create_policy = 0;
pub const TM_CORE_CREATE_POLICY__REMOVE: tm_core_create_policy = 1;
pub const TM_CORE_CREATE_POLICY__IGNORE: tm_core_create_policy = 2;
pub type tm_core_create_policy = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_core_asset_i {
    pub core_id: tm_strhash_t,
    pub path: *const ::std::os::raw::c_char,
    pub create_policy: tm_core_create_policy,
    pub _padding_61: [::std::os::raw::c_char; 4usize],
    pub version: u64,
    pub user_data: *const ::std::os::raw::c_void,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            user_data: *const ::std::os::raw::c_void,
        ) -> tm_tt_id_t,
    >,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            data_id: tm_tt_id_t,
            old_version: u64,
            user_data: *const ::std::os::raw::c_void,
        ),
    >,
    pub on_change: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            data_id: tm_tt_id_t,
            user_data: *const ::std::os::raw::c_void,
        ),
    >,
}
impl Default for tm_core_asset_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_core_update_result_t {
    pub created_assets: *mut tm_tt_id_t,
    pub removed_assets: *mut tm_tt_id_t,
    pub updated_assets: *mut tm_tt_id_t,
}
impl Default for tm_core_update_result_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_core_api {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, asset_root_id: tm_tt_id_t),
    >,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            asset_root_id: tm_tt_id_t,
            ta: *mut tm_temp_allocator_i,
        ) -> tm_core_update_result_t,
    >,
    pub locate_asset: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            asset_root_id: tm_tt_id_t,
            core_id: tm_strhash_t,
        ) -> tm_tt_id_t,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_core_importer_asset_t {
    pub id: tm_strhash_t,
    pub version: u64,
    pub path: *const ::std::os::raw::c_char,
    pub create_policy: u32,
    pub _padding_50: [::std::os::raw::c_char; 4usize],
}
impl Default for tm_core_importer_asset_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_core_importer_state_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_core_importer_api {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut tm_allocator_i,
            user_tt: *mut tm_the_truth_o,
            user_asset_root: tm_tt_id_t,
            core_project_path: *const ::std::os::raw::c_char,
            output_path: *const ::std::os::raw::c_char,
        ) -> *mut tm_core_importer_state_o,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(state: *mut tm_core_importer_state_o)>,
    pub register_assets: ::std::option::Option<
        unsafe extern "C" fn(
            state: *mut tm_core_importer_state_o,
            to_register: *const tm_core_importer_asset_t,
            num_to_register: u32,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_crash_recovery_can_recover_result_t {
    pub data: *const ::std::os::raw::c_char,
    pub data_bytes: u32,
    pub _padding_24: [::std::os::raw::c_char; 4usize],
    pub project: *const ::std::os::raw::c_char,
    pub root: *const tm_uuid_t,
}
impl Default for tm_crash_recovery_can_recover_result_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_crash_recovery_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_crash_recovery_api {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut tm_allocator_i,
            recovery_path: *const ::std::os::raw::c_char,
        ) -> *mut tm_crash_recovery_o,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(cr: *mut tm_crash_recovery_o)>,
    pub start_recording: ::std::option::Option<
        unsafe extern "C" fn(
            cr: *mut tm_crash_recovery_o,
            project: *const ::std::os::raw::c_char,
            tt: *mut tm_the_truth_o,
            root: tm_tt_id_t,
        ),
    >,
    pub stop_recording: ::std::option::Option<unsafe extern "C" fn(cr: *mut tm_crash_recovery_o)>,
    pub update: ::std::option::Option<unsafe extern "C" fn(cr: *mut tm_crash_recovery_o)>,
    pub can_recover: ::std::option::Option<
        unsafe extern "C" fn(
            cr: *mut tm_crash_recovery_o,
            ta: *mut tm_temp_allocator_i,
        ) -> tm_crash_recovery_can_recover_result_t,
    >,
    pub recover: ::std::option::Option<
        unsafe extern "C" fn(
            cr: *mut tm_crash_recovery_o,
            rd: tm_crash_recovery_can_recover_result_t,
            tt: *mut tm_the_truth_o,
        ),
    >,
    pub delete_physical_file:
        ::std::option::Option<unsafe extern "C" fn(cr: *mut tm_crash_recovery_o)>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_error_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_error_i {
    pub inst: *mut tm_error_o,
    pub errorf: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_error_o,
            file: *const ::std::os::raw::c_char,
            line: u32,
            format: *const ::std::os::raw::c_char,
            ...
        ),
    >,
    pub fatal: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_error_o,
            file: *const ::std::os::raw::c_char,
            line: u32,
            format: *const ::std::os::raw::c_char,
            ...
        ),
    >,
}
impl Default for tm_error_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_error_record_t {
    pub ta: *mut tm_temp_allocator_i,
    pub errors: *mut *mut ::std::os::raw::c_char,
    pub backing: *mut tm_error_i,
}
impl Default for tm_error_record_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_error_api {
    pub log: *mut tm_error_i,
    pub def: *mut tm_error_i,
    pub create_record_handler:
        ::std::option::Option<unsafe extern "C" fn(mem: *mut tm_error_record_t) -> tm_error_i>,
}
impl Default for tm_error_api {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_feature_flags_api {
    pub enabled: ::std::option::Option<unsafe extern "C" fn(flag: tm_strhash_t) -> bool>,
    pub set_enabled: ::std::option::Option<unsafe extern "C" fn(flag: tm_strhash_t, enabled: bool)>,
    pub all_enabled:
        ::std::option::Option<unsafe extern "C" fn(count: *mut u32) -> *const tm_strhash_t>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_git_ignore_api {
    pub match_: ::std::option::Option<
        unsafe extern "C" fn(
            patterns: *const ::std::os::raw::c_char,
            path: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
}
pub const TM_IMAGE_TYPE_1D: tm_image_type = 0;
pub const TM_IMAGE_TYPE_2D: tm_image_type = 1;
pub const TM_IMAGE_TYPE_3D: tm_image_type = 2;
pub const TM_IMAGE_TYPE_CUBE: tm_image_type = 3;
pub type tm_image_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_image_t {
    pub type_: u32,
    pub pixel_format: u32,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
    pub mip_levels: u32,
    pub layers: u32,
    pub size: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_image_archive_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_image_archive_i {
    pub inst: *mut tm_image_archive_o,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_image_archive_o,
            buffer: *mut ::std::os::raw::c_void,
            offset: u64,
            size: u32,
        ) -> u32,
    >,
    pub size: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_image_archive_o) -> u64>,
}
impl Default for tm_image_archive_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_image_loader_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_image_loader_i {
    pub inst: *mut tm_image_loader_o,
    pub extensions_string: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_image_loader_o,
            output: *mut *mut ::std::os::raw::c_char,
            ta: *mut tm_temp_allocator_i,
            separator: *const ::std::os::raw::c_char,
        ),
    >,
    pub description_string: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_image_loader_o,
            output: *mut *mut ::std::os::raw::c_char,
            ta: *mut tm_temp_allocator_i,
            separator: *const ::std::os::raw::c_char,
        ),
    >,
    pub support_from_archive: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_image_loader_o,
            image_archive: *mut tm_image_archive_i,
        ) -> bool,
    >,
    pub support_from_extension: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_image_loader_o,
            extension: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub load_image: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_image_loader_o,
            image_archive: *mut tm_image_archive_i,
            image: *mut tm_image_t,
            bits: *mut u8,
        ) -> bool,
    >,
}
impl Default for tm_image_loader_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_image_loader_api {
    pub add_loader: ::std::option::Option<unsafe extern "C" fn(loader: *mut tm_image_loader_i)>,
    pub remove_loader: ::std::option::Option<unsafe extern "C" fn(loader: *mut tm_image_loader_i)>,
    pub loader_from_archive: ::std::option::Option<
        unsafe extern "C" fn(image_archive: *mut tm_image_archive_i) -> *mut tm_image_loader_i,
    >,
    pub loader_from_extension: ::std::option::Option<
        unsafe extern "C" fn(extension: *const ::std::os::raw::c_char) -> *mut tm_image_loader_i,
    >,
    pub loaders:
        ::std::option::Option<unsafe extern "C" fn(loaders: *mut *mut tm_image_loader_i) -> u32>,
}
pub const TM_INPUT_CONTROLLER_TYPE_NONE: tm_input_controller_type = 0;
pub const TM_INPUT_CONTROLLER_TYPE_KEYBOARD: tm_input_controller_type = 1;
pub const TM_INPUT_CONTROLLER_TYPE_MOUSE: tm_input_controller_type = 2;
pub const TM_INPUT_CONTROLLER_TYPE_GAMEPAD: tm_input_controller_type = 3;
pub const TM_INPUT_CONTROLLER_TYPE_TOUCH: tm_input_controller_type = 4;
pub const TM_INPUT_CONTROLLER_TYPE_PEN: tm_input_controller_type = 5;
pub const TM_INPUT_CONTROLLER_TYPE_OTHER: tm_input_controller_type = -1;
pub type tm_input_controller_type = ::std::os::raw::c_int;
pub const TM_INPUT_MOUSE_ITEM_NONE: tm_input_mouse_item = 0;
pub const TM_INPUT_MOUSE_ITEM_BUTTON_LEFT: tm_input_mouse_item = 1;
pub const TM_INPUT_MOUSE_ITEM_BUTTON_RIGHT: tm_input_mouse_item = 2;
pub const TM_INPUT_MOUSE_ITEM_BUTTON_MIDDLE: tm_input_mouse_item = 3;
pub const TM_INPUT_MOUSE_ITEM_BUTTON_4: tm_input_mouse_item = 4;
pub const TM_INPUT_MOUSE_ITEM_BUTTON_5: tm_input_mouse_item = 5;
pub const TM_INPUT_MOUSE_ITEM_WHEEL: tm_input_mouse_item = 6;
pub const TM_INPUT_MOUSE_ITEM_MOVE: tm_input_mouse_item = 7;
pub const TM_INPUT_MOUSE_ITEM_POSITION: tm_input_mouse_item = 8;
pub const TM_INPUT_MOUSE_ITEM_COUNT: tm_input_mouse_item = 9;
pub type tm_input_mouse_item = ::std::os::raw::c_int;
pub const TM_INPUT_PEN_ITEM_NONE: tm_input_pen_item = 0;
pub const TM_INPUT_PEN_ITEM_BUTTON_1: tm_input_pen_item = 1;
pub const TM_INPUT_PEN_ITEM_BUTTON_2: tm_input_pen_item = 2;
pub const TM_INPUT_PEN_ITEM_BUTTON_3: tm_input_pen_item = 3;
pub const TM_INPUT_PEN_ITEM_BUTTON_4: tm_input_pen_item = 4;
pub const TM_INPUT_PEN_ITEM_BUTTON_5: tm_input_pen_item = 5;
pub const TM_INPUT_PEN_ITEM_WHEEL: tm_input_pen_item = 6;
pub const TM_INPUT_PEN_ITEM_POSITION: tm_input_pen_item = 7;
pub const TM_INPUT_PEN_ITEM_PRESSURE: tm_input_pen_item = 8;
pub const TM_INPUT_PEN_ITEM_ROTATION: tm_input_pen_item = 9;
pub const TM_INPUT_PEN_ITEM_TILT: tm_input_pen_item = 10;
pub const TM_INPUT_PEN_ITEM_INVERTED: tm_input_pen_item = 11;
pub const TM_INPUT_PEN_ITEM_ERASER: tm_input_pen_item = 12;
pub const TM_INPUT_PEN_ITEM_COUNT: tm_input_pen_item = 13;
pub type tm_input_pen_item = ::std::os::raw::c_int;
pub const TM_INPUT_TOUCH_ITEM_NONE: tm_input_touch_item = 0;
pub const TM_INPUT_TOUCH_ITEM_TOUCH: tm_input_touch_item = 1;
pub const TM_INPUT_TOUCH_ITEM_POSITION: tm_input_touch_item = 2;
pub const TM_INPUT_TOUCH_ITEM_PRESSURE: tm_input_touch_item = 3;
pub const TM_INPUT_TOUCH_ITEM_ORIENTATION: tm_input_touch_item = 4;
pub const TM_INPUT_TOUCH_ITEM_COUNT: tm_input_touch_item = 5;
pub type tm_input_touch_item = ::std::os::raw::c_int;
pub const TM_INPUT_KEYBOARD_ITEM_NONE: tm_input_keyboard_item = 0;
pub const TM_INPUT_KEYBOARD_ITEM_LBUTTON: tm_input_keyboard_item = 1;
pub const TM_INPUT_KEYBOARD_ITEM_RBUTTON: tm_input_keyboard_item = 2;
pub const TM_INPUT_KEYBOARD_ITEM_CANCEL: tm_input_keyboard_item = 3;
pub const TM_INPUT_KEYBOARD_ITEM_MBUTTON: tm_input_keyboard_item = 4;
pub const TM_INPUT_KEYBOARD_ITEM_XBUTTON1: tm_input_keyboard_item = 5;
pub const TM_INPUT_KEYBOARD_ITEM_XBUTTON2: tm_input_keyboard_item = 6;
pub const TM_INPUT_KEYBOARD_ITEM_BACKSPACE: tm_input_keyboard_item = 8;
pub const TM_INPUT_KEYBOARD_ITEM_TAB: tm_input_keyboard_item = 9;
pub const TM_INPUT_KEYBOARD_ITEM_CLEAR: tm_input_keyboard_item = 12;
pub const TM_INPUT_KEYBOARD_ITEM_ENTER: tm_input_keyboard_item = 13;
pub const TM_INPUT_KEYBOARD_ITEM_SHIFT: tm_input_keyboard_item = 16;
pub const TM_INPUT_KEYBOARD_ITEM_CONTROL: tm_input_keyboard_item = 17;
pub const TM_INPUT_KEYBOARD_ITEM_MENU: tm_input_keyboard_item = 18;
pub const TM_INPUT_KEYBOARD_ITEM_PAUSE: tm_input_keyboard_item = 19;
pub const TM_INPUT_KEYBOARD_ITEM_CAPSLOCK: tm_input_keyboard_item = 20;
pub const TM_INPUT_KEYBOARD_ITEM_KANA: tm_input_keyboard_item = 21;
pub const TM_INPUT_KEYBOARD_ITEM_JUNJA: tm_input_keyboard_item = 23;
pub const TM_INPUT_KEYBOARD_ITEM_FINAL: tm_input_keyboard_item = 24;
pub const TM_INPUT_KEYBOARD_ITEM_HANJA: tm_input_keyboard_item = 25;
pub const TM_INPUT_KEYBOARD_ITEM_KANJI: tm_input_keyboard_item = 25;
pub const TM_INPUT_KEYBOARD_ITEM_ESCAPE: tm_input_keyboard_item = 27;
pub const TM_INPUT_KEYBOARD_ITEM_CONVERT: tm_input_keyboard_item = 28;
pub const TM_INPUT_KEYBOARD_ITEM_NONCONVERT: tm_input_keyboard_item = 29;
pub const TM_INPUT_KEYBOARD_ITEM_ACCEPT: tm_input_keyboard_item = 30;
pub const TM_INPUT_KEYBOARD_ITEM_MODECHANGE: tm_input_keyboard_item = 31;
pub const TM_INPUT_KEYBOARD_ITEM_SPACE: tm_input_keyboard_item = 32;
pub const TM_INPUT_KEYBOARD_ITEM_PAGEUP: tm_input_keyboard_item = 33;
pub const TM_INPUT_KEYBOARD_ITEM_PAGEDOWN: tm_input_keyboard_item = 34;
pub const TM_INPUT_KEYBOARD_ITEM_END: tm_input_keyboard_item = 35;
pub const TM_INPUT_KEYBOARD_ITEM_HOME: tm_input_keyboard_item = 36;
pub const TM_INPUT_KEYBOARD_ITEM_LEFT: tm_input_keyboard_item = 37;
pub const TM_INPUT_KEYBOARD_ITEM_UP: tm_input_keyboard_item = 38;
pub const TM_INPUT_KEYBOARD_ITEM_RIGHT: tm_input_keyboard_item = 39;
pub const TM_INPUT_KEYBOARD_ITEM_DOWN: tm_input_keyboard_item = 40;
pub const TM_INPUT_KEYBOARD_ITEM_SELECT: tm_input_keyboard_item = 41;
pub const TM_INPUT_KEYBOARD_ITEM_PRINT: tm_input_keyboard_item = 42;
pub const TM_INPUT_KEYBOARD_ITEM_EXECUTE: tm_input_keyboard_item = 43;
pub const TM_INPUT_KEYBOARD_ITEM_PRINTSCREEN: tm_input_keyboard_item = 44;
pub const TM_INPUT_KEYBOARD_ITEM_INSERT: tm_input_keyboard_item = 45;
pub const TM_INPUT_KEYBOARD_ITEM_DELETE: tm_input_keyboard_item = 46;
pub const TM_INPUT_KEYBOARD_ITEM_HELP: tm_input_keyboard_item = 47;
pub const TM_INPUT_KEYBOARD_ITEM_0: tm_input_keyboard_item = 48;
pub const TM_INPUT_KEYBOARD_ITEM_1: tm_input_keyboard_item = 49;
pub const TM_INPUT_KEYBOARD_ITEM_2: tm_input_keyboard_item = 50;
pub const TM_INPUT_KEYBOARD_ITEM_3: tm_input_keyboard_item = 51;
pub const TM_INPUT_KEYBOARD_ITEM_4: tm_input_keyboard_item = 52;
pub const TM_INPUT_KEYBOARD_ITEM_5: tm_input_keyboard_item = 53;
pub const TM_INPUT_KEYBOARD_ITEM_6: tm_input_keyboard_item = 54;
pub const TM_INPUT_KEYBOARD_ITEM_7: tm_input_keyboard_item = 55;
pub const TM_INPUT_KEYBOARD_ITEM_8: tm_input_keyboard_item = 56;
pub const TM_INPUT_KEYBOARD_ITEM_9: tm_input_keyboard_item = 57;
pub const TM_INPUT_KEYBOARD_ITEM_A: tm_input_keyboard_item = 65;
pub const TM_INPUT_KEYBOARD_ITEM_B: tm_input_keyboard_item = 66;
pub const TM_INPUT_KEYBOARD_ITEM_C: tm_input_keyboard_item = 67;
pub const TM_INPUT_KEYBOARD_ITEM_D: tm_input_keyboard_item = 68;
pub const TM_INPUT_KEYBOARD_ITEM_E: tm_input_keyboard_item = 69;
pub const TM_INPUT_KEYBOARD_ITEM_F: tm_input_keyboard_item = 70;
pub const TM_INPUT_KEYBOARD_ITEM_G: tm_input_keyboard_item = 71;
pub const TM_INPUT_KEYBOARD_ITEM_H: tm_input_keyboard_item = 72;
pub const TM_INPUT_KEYBOARD_ITEM_I: tm_input_keyboard_item = 73;
pub const TM_INPUT_KEYBOARD_ITEM_J: tm_input_keyboard_item = 74;
pub const TM_INPUT_KEYBOARD_ITEM_K: tm_input_keyboard_item = 75;
pub const TM_INPUT_KEYBOARD_ITEM_L: tm_input_keyboard_item = 76;
pub const TM_INPUT_KEYBOARD_ITEM_M: tm_input_keyboard_item = 77;
pub const TM_INPUT_KEYBOARD_ITEM_N: tm_input_keyboard_item = 78;
pub const TM_INPUT_KEYBOARD_ITEM_O: tm_input_keyboard_item = 79;
pub const TM_INPUT_KEYBOARD_ITEM_P: tm_input_keyboard_item = 80;
pub const TM_INPUT_KEYBOARD_ITEM_Q: tm_input_keyboard_item = 81;
pub const TM_INPUT_KEYBOARD_ITEM_R: tm_input_keyboard_item = 82;
pub const TM_INPUT_KEYBOARD_ITEM_S: tm_input_keyboard_item = 83;
pub const TM_INPUT_KEYBOARD_ITEM_T: tm_input_keyboard_item = 84;
pub const TM_INPUT_KEYBOARD_ITEM_U: tm_input_keyboard_item = 85;
pub const TM_INPUT_KEYBOARD_ITEM_V: tm_input_keyboard_item = 86;
pub const TM_INPUT_KEYBOARD_ITEM_W: tm_input_keyboard_item = 87;
pub const TM_INPUT_KEYBOARD_ITEM_X: tm_input_keyboard_item = 88;
pub const TM_INPUT_KEYBOARD_ITEM_Y: tm_input_keyboard_item = 89;
pub const TM_INPUT_KEYBOARD_ITEM_Z: tm_input_keyboard_item = 90;
pub const TM_INPUT_KEYBOARD_ITEM_LWIN: tm_input_keyboard_item = 91;
pub const TM_INPUT_KEYBOARD_ITEM_RWIN: tm_input_keyboard_item = 92;
pub const TM_INPUT_KEYBOARD_ITEM_APPS: tm_input_keyboard_item = 93;
pub const TM_INPUT_KEYBOARD_ITEM_SLEEP: tm_input_keyboard_item = 95;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPAD0: tm_input_keyboard_item = 96;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPAD1: tm_input_keyboard_item = 97;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPAD2: tm_input_keyboard_item = 98;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPAD3: tm_input_keyboard_item = 99;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPAD4: tm_input_keyboard_item = 100;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPAD5: tm_input_keyboard_item = 101;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPAD6: tm_input_keyboard_item = 102;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPAD7: tm_input_keyboard_item = 103;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPAD8: tm_input_keyboard_item = 104;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPAD9: tm_input_keyboard_item = 105;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPADASTERISK: tm_input_keyboard_item = 106;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPADPLUS: tm_input_keyboard_item = 107;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPADENTER: tm_input_keyboard_item = 108;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPADMINUS: tm_input_keyboard_item = 109;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPADDOT: tm_input_keyboard_item = 110;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPADSLASH: tm_input_keyboard_item = 111;
pub const TM_INPUT_KEYBOARD_ITEM_F1: tm_input_keyboard_item = 112;
pub const TM_INPUT_KEYBOARD_ITEM_F2: tm_input_keyboard_item = 113;
pub const TM_INPUT_KEYBOARD_ITEM_F3: tm_input_keyboard_item = 114;
pub const TM_INPUT_KEYBOARD_ITEM_F4: tm_input_keyboard_item = 115;
pub const TM_INPUT_KEYBOARD_ITEM_F5: tm_input_keyboard_item = 116;
pub const TM_INPUT_KEYBOARD_ITEM_F6: tm_input_keyboard_item = 117;
pub const TM_INPUT_KEYBOARD_ITEM_F7: tm_input_keyboard_item = 118;
pub const TM_INPUT_KEYBOARD_ITEM_F8: tm_input_keyboard_item = 119;
pub const TM_INPUT_KEYBOARD_ITEM_F9: tm_input_keyboard_item = 120;
pub const TM_INPUT_KEYBOARD_ITEM_F10: tm_input_keyboard_item = 121;
pub const TM_INPUT_KEYBOARD_ITEM_F11: tm_input_keyboard_item = 122;
pub const TM_INPUT_KEYBOARD_ITEM_F12: tm_input_keyboard_item = 123;
pub const TM_INPUT_KEYBOARD_ITEM_F13: tm_input_keyboard_item = 124;
pub const TM_INPUT_KEYBOARD_ITEM_F14: tm_input_keyboard_item = 125;
pub const TM_INPUT_KEYBOARD_ITEM_F15: tm_input_keyboard_item = 126;
pub const TM_INPUT_KEYBOARD_ITEM_F16: tm_input_keyboard_item = 127;
pub const TM_INPUT_KEYBOARD_ITEM_F17: tm_input_keyboard_item = 128;
pub const TM_INPUT_KEYBOARD_ITEM_F18: tm_input_keyboard_item = 129;
pub const TM_INPUT_KEYBOARD_ITEM_F19: tm_input_keyboard_item = 130;
pub const TM_INPUT_KEYBOARD_ITEM_F20: tm_input_keyboard_item = 131;
pub const TM_INPUT_KEYBOARD_ITEM_F21: tm_input_keyboard_item = 132;
pub const TM_INPUT_KEYBOARD_ITEM_F22: tm_input_keyboard_item = 133;
pub const TM_INPUT_KEYBOARD_ITEM_F23: tm_input_keyboard_item = 134;
pub const TM_INPUT_KEYBOARD_ITEM_F24: tm_input_keyboard_item = 135;
pub const TM_INPUT_KEYBOARD_ITEM_NAVIGATION_VIEW: tm_input_keyboard_item = 136;
pub const TM_INPUT_KEYBOARD_ITEM_NAVIGATION_MENU: tm_input_keyboard_item = 137;
pub const TM_INPUT_KEYBOARD_ITEM_NAVIGATION_UP: tm_input_keyboard_item = 138;
pub const TM_INPUT_KEYBOARD_ITEM_NAVIGATION_DOWN: tm_input_keyboard_item = 139;
pub const TM_INPUT_KEYBOARD_ITEM_NAVIGATION_LEFT: tm_input_keyboard_item = 140;
pub const TM_INPUT_KEYBOARD_ITEM_NAVIGATION_RIGHT: tm_input_keyboard_item = 141;
pub const TM_INPUT_KEYBOARD_ITEM_NAVIGATION_ACCEPT: tm_input_keyboard_item = 142;
pub const TM_INPUT_KEYBOARD_ITEM_NAVIGATION_CANCEL: tm_input_keyboard_item = 143;
pub const TM_INPUT_KEYBOARD_ITEM_NUMLOCK: tm_input_keyboard_item = 144;
pub const TM_INPUT_KEYBOARD_ITEM_SCROLLLOCK: tm_input_keyboard_item = 145;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPADEQUAL: tm_input_keyboard_item = 146;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_FJ_JISHO: tm_input_keyboard_item = 146;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_FJ_MASSHOU: tm_input_keyboard_item = 147;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_FJ_TOUROKU: tm_input_keyboard_item = 148;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_FJ_LOYA: tm_input_keyboard_item = 149;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_FJ_ROYA: tm_input_keyboard_item = 150;
pub const TM_INPUT_KEYBOARD_ITEM_LEFTSHIFT: tm_input_keyboard_item = 160;
pub const TM_INPUT_KEYBOARD_ITEM_RIGHTSHIFT: tm_input_keyboard_item = 161;
pub const TM_INPUT_KEYBOARD_ITEM_LEFTCONTROL: tm_input_keyboard_item = 162;
pub const TM_INPUT_KEYBOARD_ITEM_RIGHTCONTROL: tm_input_keyboard_item = 163;
pub const TM_INPUT_KEYBOARD_ITEM_LEFTALT: tm_input_keyboard_item = 164;
pub const TM_INPUT_KEYBOARD_ITEM_RIGHTALT: tm_input_keyboard_item = 165;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_BACK: tm_input_keyboard_item = 166;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_FORWARD: tm_input_keyboard_item = 167;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_REFRESH: tm_input_keyboard_item = 168;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_STOP: tm_input_keyboard_item = 169;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_SEARCH: tm_input_keyboard_item = 170;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_FAVORITES: tm_input_keyboard_item = 171;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_HOME: tm_input_keyboard_item = 172;
pub const TM_INPUT_KEYBOARD_ITEM_VOLUME_MUTE: tm_input_keyboard_item = 173;
pub const TM_INPUT_KEYBOARD_ITEM_VOLUME_DOWN: tm_input_keyboard_item = 174;
pub const TM_INPUT_KEYBOARD_ITEM_VOLUME_UP: tm_input_keyboard_item = 175;
pub const TM_INPUT_KEYBOARD_ITEM_MEDIA_NEXT_TRACK: tm_input_keyboard_item = 176;
pub const TM_INPUT_KEYBOARD_ITEM_MEDIA_PREV_TRACK: tm_input_keyboard_item = 177;
pub const TM_INPUT_KEYBOARD_ITEM_MEDIA_STOP: tm_input_keyboard_item = 178;
pub const TM_INPUT_KEYBOARD_ITEM_MEDIA_PLAY_PAUSE: tm_input_keyboard_item = 179;
pub const TM_INPUT_KEYBOARD_ITEM_LAUNCH_MAIL: tm_input_keyboard_item = 180;
pub const TM_INPUT_KEYBOARD_ITEM_LAUNCH_MEDIA_SELECT: tm_input_keyboard_item = 181;
pub const TM_INPUT_KEYBOARD_ITEM_LAUNCH_APP1: tm_input_keyboard_item = 182;
pub const TM_INPUT_KEYBOARD_ITEM_LAUNCH_APP2: tm_input_keyboard_item = 183;
pub const TM_INPUT_KEYBOARD_ITEM_SEMICOLON: tm_input_keyboard_item = 186;
pub const TM_INPUT_KEYBOARD_ITEM_EQUAL: tm_input_keyboard_item = 187;
pub const TM_INPUT_KEYBOARD_ITEM_COMMA: tm_input_keyboard_item = 188;
pub const TM_INPUT_KEYBOARD_ITEM_MINUS: tm_input_keyboard_item = 189;
pub const TM_INPUT_KEYBOARD_ITEM_DOT: tm_input_keyboard_item = 190;
pub const TM_INPUT_KEYBOARD_ITEM_SLASH: tm_input_keyboard_item = 191;
pub const TM_INPUT_KEYBOARD_ITEM_GRAVE: tm_input_keyboard_item = 192;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_A: tm_input_keyboard_item = 195;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_B: tm_input_keyboard_item = 196;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_X: tm_input_keyboard_item = 197;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_Y: tm_input_keyboard_item = 198;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_RIGHT_SHOULDER: tm_input_keyboard_item = 199;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_LEFT_SHOULDER: tm_input_keyboard_item = 200;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_LEFT_TRIGGER: tm_input_keyboard_item = 201;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_RIGHT_TRIGGER: tm_input_keyboard_item = 202;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_DPAD_UP: tm_input_keyboard_item = 203;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_DPAD_DOWN: tm_input_keyboard_item = 204;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_DPAD_LEFT: tm_input_keyboard_item = 205;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_DPAD_RIGHT: tm_input_keyboard_item = 206;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_MENU: tm_input_keyboard_item = 207;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_VIEW: tm_input_keyboard_item = 208;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_LEFT_THUMBSTICK_BUTTON: tm_input_keyboard_item = 209;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_RIGHT_THUMBSTICK_BUTTON: tm_input_keyboard_item = 210;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_LEFT_THUMBSTICK_UP: tm_input_keyboard_item = 211;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_LEFT_THUMBSTICK_DOWN: tm_input_keyboard_item = 212;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_LEFT_THUMBSTICK_RIGHT: tm_input_keyboard_item = 213;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_LEFT_THUMBSTICK_LEFT: tm_input_keyboard_item = 214;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_RIGHT_THUMBSTICK_UP: tm_input_keyboard_item = 215;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_RIGHT_THUMBSTICK_DOWN: tm_input_keyboard_item = 216;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_RIGHT_THUMBSTICK_RIGHT: tm_input_keyboard_item = 217;
pub const TM_INPUT_KEYBOARD_ITEM_GAMEPAD_RIGHT_THUMBSTICK_LEFT: tm_input_keyboard_item = 218;
pub const TM_INPUT_KEYBOARD_ITEM_LEFTBRACE: tm_input_keyboard_item = 219;
pub const TM_INPUT_KEYBOARD_ITEM_BACKSLASH: tm_input_keyboard_item = 220;
pub const TM_INPUT_KEYBOARD_ITEM_RIGHTBRACE: tm_input_keyboard_item = 221;
pub const TM_INPUT_KEYBOARD_ITEM_APOSTROPHE: tm_input_keyboard_item = 222;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_8: tm_input_keyboard_item = 223;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_AX: tm_input_keyboard_item = 225;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_102: tm_input_keyboard_item = 226;
pub const TM_INPUT_KEYBOARD_ITEM_ICO_HELP: tm_input_keyboard_item = 227;
pub const TM_INPUT_KEYBOARD_ITEM_ICO_00: tm_input_keyboard_item = 228;
pub const TM_INPUT_KEYBOARD_ITEM_PROCESSKEY: tm_input_keyboard_item = 229;
pub const TM_INPUT_KEYBOARD_ITEM_ICO_CLEAR: tm_input_keyboard_item = 230;
pub const TM_INPUT_KEYBOARD_ITEM_PACKET: tm_input_keyboard_item = 231;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_RESET: tm_input_keyboard_item = 233;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_JUMP: tm_input_keyboard_item = 234;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_PA1: tm_input_keyboard_item = 235;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_PA2: tm_input_keyboard_item = 236;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_PA3: tm_input_keyboard_item = 237;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_WSCTRL: tm_input_keyboard_item = 238;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_CUSEL: tm_input_keyboard_item = 239;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_ATTN: tm_input_keyboard_item = 240;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_FINISH: tm_input_keyboard_item = 241;
pub const TM_INPUT_KEYBOARD_ITEM_COPY: tm_input_keyboard_item = 242;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_AUTO: tm_input_keyboard_item = 243;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_ENLW: tm_input_keyboard_item = 244;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_BACKTAB: tm_input_keyboard_item = 245;
pub const TM_INPUT_KEYBOARD_ITEM_ATTN: tm_input_keyboard_item = 246;
pub const TM_INPUT_KEYBOARD_ITEM_CRSEL: tm_input_keyboard_item = 247;
pub const TM_INPUT_KEYBOARD_ITEM_EXSEL: tm_input_keyboard_item = 248;
pub const TM_INPUT_KEYBOARD_ITEM_EREOF: tm_input_keyboard_item = 249;
pub const TM_INPUT_KEYBOARD_ITEM_PLAY: tm_input_keyboard_item = 250;
pub const TM_INPUT_KEYBOARD_ITEM_ZOOM: tm_input_keyboard_item = 251;
pub const TM_INPUT_KEYBOARD_ITEM_NONAME: tm_input_keyboard_item = 252;
pub const TM_INPUT_KEYBOARD_ITEM_PA1: tm_input_keyboard_item = 253;
pub const TM_INPUT_KEYBOARD_ITEM_OEM_CLEAR: tm_input_keyboard_item = 254;
pub const TM_INPUT_KEYBOARD_ITEM_HASHTILDE: tm_input_keyboard_item = 255;
pub const TM_INPUT_KEYBOARD_ITEM_102ND: tm_input_keyboard_item = 256;
pub const TM_INPUT_KEYBOARD_ITEM_COMPOSE: tm_input_keyboard_item = 257;
pub const TM_INPUT_KEYBOARD_ITEM_POWER: tm_input_keyboard_item = 258;
pub const TM_INPUT_KEYBOARD_ITEM_OPEN: tm_input_keyboard_item = 259;
pub const TM_INPUT_KEYBOARD_ITEM_PROPS: tm_input_keyboard_item = 260;
pub const TM_INPUT_KEYBOARD_ITEM_FRONT: tm_input_keyboard_item = 261;
pub const TM_INPUT_KEYBOARD_ITEM_STOP: tm_input_keyboard_item = 262;
pub const TM_INPUT_KEYBOARD_ITEM_AGAIN: tm_input_keyboard_item = 263;
pub const TM_INPUT_KEYBOARD_ITEM_UNDO: tm_input_keyboard_item = 264;
pub const TM_INPUT_KEYBOARD_ITEM_CUT: tm_input_keyboard_item = 265;
pub const TM_INPUT_KEYBOARD_ITEM_PASTE: tm_input_keyboard_item = 266;
pub const TM_INPUT_KEYBOARD_ITEM_FIND: tm_input_keyboard_item = 267;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPADCOMMA: tm_input_keyboard_item = 268;
pub const TM_INPUT_KEYBOARD_ITEM_RO: tm_input_keyboard_item = 269;
pub const TM_INPUT_KEYBOARD_ITEM_KATAKANAHIRAGANA: tm_input_keyboard_item = 270;
pub const TM_INPUT_KEYBOARD_ITEM_YEN: tm_input_keyboard_item = 271;
pub const TM_INPUT_KEYBOARD_ITEM_HENKAN: tm_input_keyboard_item = 272;
pub const TM_INPUT_KEYBOARD_ITEM_MUHENKAN: tm_input_keyboard_item = 273;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPADJPCOMMA: tm_input_keyboard_item = 274;
pub const TM_INPUT_KEYBOARD_ITEM_INTERNATIONAL_7: tm_input_keyboard_item = 275;
pub const TM_INPUT_KEYBOARD_ITEM_INTERNATIONAL_8: tm_input_keyboard_item = 276;
pub const TM_INPUT_KEYBOARD_ITEM_INTERNATIONAL_9: tm_input_keyboard_item = 277;
pub const TM_INPUT_KEYBOARD_ITEM_HANGEUL: tm_input_keyboard_item = 278;
pub const TM_INPUT_KEYBOARD_ITEM_KATAKANA: tm_input_keyboard_item = 279;
pub const TM_INPUT_KEYBOARD_ITEM_HIRAGANA: tm_input_keyboard_item = 280;
pub const TM_INPUT_KEYBOARD_ITEM_ZENKAKUHANKAKU: tm_input_keyboard_item = 281;
pub const TM_INPUT_KEYBOARD_ITEM_LANG_6: tm_input_keyboard_item = 282;
pub const TM_INPUT_KEYBOARD_ITEM_LANG_7: tm_input_keyboard_item = 283;
pub const TM_INPUT_KEYBOARD_ITEM_LANG_8: tm_input_keyboard_item = 284;
pub const TM_INPUT_KEYBOARD_ITEM_LANG_9: tm_input_keyboard_item = 285;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPADLEFTPAREN: tm_input_keyboard_item = 286;
pub const TM_INPUT_KEYBOARD_ITEM_NUMPADRIGHTPAREN: tm_input_keyboard_item = 287;
pub const TM_INPUT_KEYBOARD_ITEM_LEFTMETA: tm_input_keyboard_item = 288;
pub const TM_INPUT_KEYBOARD_ITEM_RIGHTMETA: tm_input_keyboard_item = 289;
pub const TM_INPUT_KEYBOARD_ITEM_MEDIA_EJECT: tm_input_keyboard_item = 290;
pub const TM_INPUT_KEYBOARD_ITEM_MEDIA_VOLUME_UP: tm_input_keyboard_item = 291;
pub const TM_INPUT_KEYBOARD_ITEM_MEDIA_VOLUME_DOWN: tm_input_keyboard_item = 292;
pub const TM_INPUT_KEYBOARD_ITEM_MEDIA_MUTE: tm_input_keyboard_item = 293;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_WWW: tm_input_keyboard_item = 294;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_SCROLLUP: tm_input_keyboard_item = 295;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_SCROLLDOWN: tm_input_keyboard_item = 296;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_EDIT: tm_input_keyboard_item = 297;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_SLEEP: tm_input_keyboard_item = 298;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_COFFEE: tm_input_keyboard_item = 299;
pub const TM_INPUT_KEYBOARD_ITEM_BROWSER_CALC: tm_input_keyboard_item = 300;
pub const TM_INPUT_KEYBOARD_ITEM_COUNT: tm_input_keyboard_item = 301;
pub type tm_input_keyboard_item = ::std::os::raw::c_int;
pub const TM_INPUT_GAMEPAD_ITEM_NONE: tm_input_gamepad_item = 0;
pub const TM_INPUT_GAMEPAD_ITEM_BUTTON_A: tm_input_gamepad_item = 1;
pub const TM_INPUT_GAMEPAD_ITEM_BUTTON_B: tm_input_gamepad_item = 2;
pub const TM_INPUT_GAMEPAD_ITEM_BUTTON_X: tm_input_gamepad_item = 3;
pub const TM_INPUT_GAMEPAD_ITEM_BUTTON_Y: tm_input_gamepad_item = 4;
pub const TM_INPUT_GAMEPAD_ITEM_BUTTON_LEFT_SHOULDER: tm_input_gamepad_item = 5;
pub const TM_INPUT_GAMEPAD_ITEM_BUTTON_RIGHT_SHOULDER: tm_input_gamepad_item = 6;
pub const TM_INPUT_GAMEPAD_ITEM_BUTTON_BACK: tm_input_gamepad_item = 7;
pub const TM_INPUT_GAMEPAD_ITEM_BUTTON_START: tm_input_gamepad_item = 8;
pub const TM_INPUT_GAMEPAD_ITEM_DPAD_LEFT: tm_input_gamepad_item = 9;
pub const TM_INPUT_GAMEPAD_ITEM_DPAD_RIGHT: tm_input_gamepad_item = 10;
pub const TM_INPUT_GAMEPAD_ITEM_DPAD_UP: tm_input_gamepad_item = 11;
pub const TM_INPUT_GAMEPAD_ITEM_DPAD_DOWN: tm_input_gamepad_item = 12;
pub const TM_INPUT_GAMEPAD_BUTTON_LEFT_THUMB: tm_input_gamepad_item = 13;
pub const TM_INPUT_GAMEPAD_BUTTON_RIGHT_THUMB: tm_input_gamepad_item = 14;
pub const TM_INPUT_GAMEPAD_ITEM_BUTTON_LEFT_TRIGGER: tm_input_gamepad_item = 15;
pub const TM_INPUT_GAMEPAD_ITEM_BUTTON_RIGHT_TRIGGER: tm_input_gamepad_item = 16;
pub const TM_INPUT_GAMEPAD_ITEM_LEFT_STICK: tm_input_gamepad_item = 17;
pub const TM_INPUT_GAMEPAD_ITEM_RIGHT_STICK: tm_input_gamepad_item = 18;
pub const TM_INPUT_GAMEPAD_ITEM_COUNT: tm_input_gamepad_item = 19;
pub type tm_input_gamepad_item = ::std::os::raw::c_int;
pub const TM_INPUT_EVENT_TYPE_NONE: tm_input_event_type = 0;
pub const TM_INPUT_EVENT_TYPE_DATA_CHANGE: tm_input_event_type = 1;
pub const TM_INPUT_EVENT_TYPE_TEXT: tm_input_event_type = 2;
pub type tm_input_event_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_input_item_t {
    pub id: u64,
    pub name: *const ::std::os::raw::c_char,
    pub components: u32,
    pub _padding_413: [::std::os::raw::c_char; 4usize],
}
impl Default for tm_input_item_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_input_data_t {
    pub __bindgen_anon_1: tm_input_data_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tm_input_data_t__bindgen_ty_1 {
    pub f: tm_vec4_t,
    pub codepoint: u32,
}
impl Default for tm_input_data_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tm_input_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_input_event_t {
    pub time: u64,
    pub source: *mut tm_input_source_i,
    pub controller_id: u64,
    pub item_id: u64,
    pub type_: u64,
    pub data: tm_input_data_t,
    pub extra: *mut ::std::os::raw::c_void,
}
impl Default for tm_input_event_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_input_source_i {
    pub controller_name: *const ::std::os::raw::c_char,
    pub controller_type: u32,
    pub _padding_471: [::std::os::raw::c_char; 4usize],
    pub controllers: ::std::option::Option<unsafe extern "C" fn(ids: *mut *mut u64) -> u32>,
    pub items: ::std::option::Option<unsafe extern "C" fn(items: *mut *mut tm_input_item_t) -> u32>,
    pub events: ::std::option::Option<
        unsafe extern "C" fn(start: u64, events: *mut tm_input_event_t, buffer_size: u64) -> u64,
    >,
    pub state:
        ::std::option::Option<unsafe extern "C" fn(controller: u64, item: u64) -> tm_input_data_t>,
}
impl Default for tm_input_source_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_input_api {
    pub add_source: ::std::option::Option<unsafe extern "C" fn(source: *mut tm_input_source_i)>,
    pub remove_source: ::std::option::Option<unsafe extern "C" fn(source: *mut tm_input_source_i)>,
    pub sources: ::std::option::Option<
        unsafe extern "C" fn(sources: *mut *mut *mut tm_input_source_i) -> u32,
    >,
    pub events: ::std::option::Option<
        unsafe extern "C" fn(start: u64, events: *mut tm_input_event_t, buffer_size: u64) -> u64,
    >,
    pub keyboard_item_names:
        ::std::option::Option<unsafe extern "C" fn() -> *mut *const ::std::os::raw::c_char>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_integration_test_runner_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_integration_test_runner_i {
    pub inst: *mut tm_integration_test_runner_o,
    pub context: tm_strhash_t,
    pub app: *mut tm_application_o,
    pub wait: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_integration_test_runner_o, sec: f32, id: u64) -> bool,
    >,
}
impl Default for tm_integration_test_runner_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_integration_test_i {
    pub name: *const ::std::os::raw::c_char,
    pub context: tm_strhash_t,
    pub tick: ::std::option::Option<unsafe extern "C" fn(arg1: *mut tm_integration_test_runner_i)>,
}
impl Default for tm_integration_test_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_atomic_counter_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_jobdecl_t {
    pub task: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>,
    pub data: *mut ::std::os::raw::c_void,
    pub pin_thread_handle: u32,
    pub _padding_45: [::std::os::raw::c_char; 4usize],
}
impl Default for tm_jobdecl_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_job_system_api {
    pub run_jobs: ::std::option::Option<
        unsafe extern "C" fn(jobs: *mut tm_jobdecl_t, num_jobs: u32) -> *mut tm_atomic_counter_o,
    >,
    pub run_jobs_and_auto_free_counter:
        ::std::option::Option<unsafe extern "C" fn(jobs: *mut tm_jobdecl_t, num_jobs: u32)>,
    pub wait_for_counter:
        ::std::option::Option<unsafe extern "C" fn(counter: *mut tm_atomic_counter_o, value: u32)>,
    pub wait_for_counter_and_free:
        ::std::option::Option<unsafe extern "C" fn(counter: *mut tm_atomic_counter_o)>,
    pub wait_for_counter_and_free_no_fiber:
        ::std::option::Option<unsafe extern "C" fn(counter: *mut tm_atomic_counter_o)>,
    pub pin_thread_handle:
        ::std::option::Option<unsafe extern "C" fn(worker_thread_index: u32) -> u32>,
    pub num_worker_threads: ::std::option::Option<unsafe extern "C" fn() -> u32>,
}
pub const TM_JSON_PARSE_EXT_ALLOW_UNQUOTED_KEYS: tm_json_parse_ext = 1;
pub const TM_JSON_PARSE_EXT_ALLOW_COMMENTS: tm_json_parse_ext = 2;
pub const TM_JSON_PARSE_EXT_IMPLICIT_ROOT_OBJECT: tm_json_parse_ext = 4;
pub const TM_JSON_PARSE_EXT_OPTIONAL_COMMAS: tm_json_parse_ext = 8;
pub const TM_JSON_PARSE_EXT_EQUALS_FOR_COLON: tm_json_parse_ext = 16;
pub const TM_JSON_PARSE_EXT_LUA_QUOTING: tm_json_parse_ext = 32;
pub type tm_json_parse_ext = ::std::os::raw::c_int;
pub const TM_JSON_GENERATE_EXT_PREFER_UNQUOTED_KEYS: tm_json_generate_ext = 1;
pub const TM_JSON_GENERATE_EXT_IMPLICIT_ROOT_OBJECT: tm_json_generate_ext = 4;
pub const TM_JSON_GENERATE_EXT_NO_COMMAS: tm_json_generate_ext = 8;
pub const TM_JSON_GENERATE_EXT_USE_EQUALS_INSTEAD_OF_COLON: tm_json_generate_ext = 16;
pub const TM_JSON_GENERATE_EXT_USE_LUA_QUOTING: tm_json_generate_ext = 32;
pub const TM_JSON_GENERATE_INLINE_SMALL_ARRAYS: tm_json_generate_ext = 64;
pub const TM_JSON_GENERATE_INLINE_SMALL_OBJECTS: tm_json_generate_ext = 128;
pub const TM_JSON_GENERATE_INDENT_WITH_TABS: tm_json_generate_ext = 256;
pub type tm_json_generate_ext = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_json_line_info_t {
    pub config_item: u32,
    pub line_number: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_json_parse_info_t {
    pub success: bool,
    pub error: [::std::os::raw::c_char; 80usize],
    pub _padding_128: [::std::os::raw::c_char; 3usize],
    pub num_line_info: u32,
    pub allocated_line_info: u32,
    pub line_info: [tm_json_line_info_t; 1usize],
}
impl Default for tm_json_parse_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_json_generate_t {
    pub s: *mut ::std::os::raw::c_char,
    pub len: u32,
    pub allocated: u32,
}
impl Default for tm_json_generate_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_json_api {
    pub parse: ::std::option::Option<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            config: *mut tm_config_i,
            extensions: tm_json_parse_ext,
            error: *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub parse_with_line_info: ::std::option::Option<
        unsafe extern "C" fn(
            s: *const ::std::os::raw::c_char,
            config: *mut tm_config_i,
            extensions: tm_json_parse_ext,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_json_parse_info_t,
    >,
    pub line_number: ::std::option::Option<
        unsafe extern "C" fn(pi: *const tm_json_parse_info_t, item: *const tm_config_item_t) -> u32,
    >,
    pub generate: ::std::option::Option<
        unsafe extern "C" fn(
            config: *mut tm_config_i,
            flags: tm_json_generate_ext,
            ta: *mut tm_temp_allocator_i,
        ) -> tm_json_generate_t,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_localizer_strings_t {
    pub num_strings: u32,
    pub stride_bytes: u32,
    pub strings: *const *const ::std::os::raw::c_char,
}
impl Default for tm_localizer_strings_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type tm_localizer_strings_i =
    ::std::option::Option<unsafe extern "C" fn(language: tm_strhash_t) -> tm_localizer_strings_t>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_localizer_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_localizer_i {
    pub inst: *mut tm_localizer_o,
    pub localize: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_localizer_o,
            s: *const ::std::os::raw::c_char,
            context: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
}
impl Default for tm_localizer_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_localizer_api {
    pub def: *mut *mut tm_localizer_i,
    pub passthrough: *mut tm_localizer_i,
}
impl Default for tm_localizer_api {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TM_LOG_TYPE_INFO: tm_log_type = 0;
pub const TM_LOG_TYPE_DEBUG: tm_log_type = 1;
pub const TM_LOG_TYPE_ERROR: tm_log_type = 2;
pub type tm_log_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_logger_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_logger_i {
    pub inst: *mut tm_logger_o,
    pub log: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_logger_o,
            log_type: tm_log_type,
            msg: *const ::std::os::raw::c_char,
        ),
    >,
}
impl Default for tm_logger_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_logger_api {
    pub add_logger: ::std::option::Option<unsafe extern "C" fn(logger: *const tm_logger_i)>,
    pub remove_logger: ::std::option::Option<unsafe extern "C" fn(logger: *const tm_logger_i)>,
    pub print: ::std::option::Option<
        unsafe extern "C" fn(log_type: tm_log_type, msg: *const ::std::os::raw::c_char),
    >,
    pub printf: ::std::option::Option<
        unsafe extern "C" fn(
            log_type: tm_log_type,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
    >,
    pub default_logger: *mut tm_logger_i,
}
impl Default for tm_logger_api {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_lz4_api {
    pub compress: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            src_size: u32,
            dst: *mut ::std::os::raw::c_char,
            dst_capacity: u32,
        ) -> u32,
    >,
    pub decompress: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            src_size: u32,
            dst: *mut ::std::os::raw::c_char,
            dst_capacity: u32,
        ) -> u32,
    >,
    pub compress_bound: ::std::option::Option<unsafe extern "C" fn(src_size: u32) -> u32>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_math_api {
    pub mat44_multiply: ::std::option::Option<
        unsafe extern "C" fn(res: *mut tm_mat44_t, lhs: *const tm_mat44_t, rhs: *const tm_mat44_t),
    >,
    pub mat44_inverse:
        ::std::option::Option<unsafe extern "C" fn(res: *mut tm_mat44_t, m: *const tm_mat44_t)>,
    pub mat44_determinant: ::std::option::Option<unsafe extern "C" fn(m: *const tm_mat44_t) -> f32>,
    pub mat44_determinant33:
        ::std::option::Option<unsafe extern "C" fn(m: *const tm_mat44_t) -> f32>,
    pub mat44_to_quaternion:
        ::std::option::Option<unsafe extern "C" fn(m: *const tm_mat44_t) -> tm_vec4_t>,
    pub mat44_to_translation_quaternion_scale: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut tm_vec3_t,
            r: *mut tm_vec4_t,
            s: *mut tm_vec3_t,
            m: *const tm_mat44_t,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_memory_tracker_scope_data_t {
    pub desc: *const ::std::os::raw::c_char,
    pub allocated_bytes: u64,
    pub allocation_count: u64,
    pub parent: u32,
    pub num_children: u32,
    pub tracing_enabled: bool,
    pub _padding_44: [::std::os::raw::c_char; 3usize],
    pub trace_count: u32,
}
impl Default for tm_memory_tracker_scope_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_memory_tracker_trace_data_t {
    pub file: *const ::std::os::raw::c_char,
    pub line: u32,
    pub scope: u32,
    pub allocated_bytes: u64,
    pub allocation_count: u64,
}
impl Default for tm_memory_tracker_trace_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_memory_tracker_api {
    pub check_for_leaked_scopes: ::std::option::Option<unsafe extern "C" fn()>,
    pub create_scope: ::std::option::Option<
        unsafe extern "C" fn(desc: *const ::std::os::raw::c_char, parent_scope: u32) -> u32,
    >,
    pub destroy_scope: ::std::option::Option<unsafe extern "C" fn(s: u32)>,
    pub destroy_scope_allowing_leaks:
        ::std::option::Option<unsafe extern "C" fn(scope: u32, max_leaked_bytes: u64)>,
    pub record_realloc: ::std::option::Option<
        unsafe extern "C" fn(
            old_ptr: *mut ::std::os::raw::c_void,
            old_size: u64,
            new_ptr: *mut ::std::os::raw::c_void,
            new_size: u64,
            file: *const ::std::os::raw::c_char,
            line: u32,
            scope: u32,
        ),
    >,
    pub allocated_bytes: ::std::option::Option<unsafe extern "C" fn(scope: u32) -> u64>,
    pub allocation_count: ::std::option::Option<unsafe extern "C" fn(scope: u32) -> u64>,
    pub set_scope_tracing: ::std::option::Option<unsafe extern "C" fn(scope: u32, enabled: bool)>,
    pub scope_data_snapshot: ::std::option::Option<
        unsafe extern "C" fn(ta: *mut tm_temp_allocator_i) -> *mut tm_memory_tracker_scope_data_t,
    >,
    pub trace_data_snapshot: ::std::option::Option<
        unsafe extern "C" fn(ta: *mut tm_temp_allocator_i) -> *mut tm_memory_tracker_trace_data_t,
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_os_virtual_memory_api {
    pub map: ::std::option::Option<unsafe extern "C" fn(size: u64) -> *mut ::std::os::raw::c_void>,
    pub unmap:
        ::std::option::Option<unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, size: u64)>,
    pub reserve:
        ::std::option::Option<unsafe extern "C" fn(size: u64) -> *mut ::std::os::raw::c_void>,
    pub commit:
        ::std::option::Option<unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, size: u64)>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_file_o {
    pub handle: u64,
    pub valid: bool,
    pub _padding_51: [::std::os::raw::c_char; 7usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_file_time_o {
    pub opaque: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_os_file_io_api {
    pub open_input: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> tm_file_o,
    >,
    pub open_output: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> tm_file_o,
    >,
    pub open_append: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> tm_file_o,
    >,
    pub set_position: ::std::option::Option<unsafe extern "C" fn(file: tm_file_o, pos: u64)>,
    pub size: ::std::option::Option<unsafe extern "C" fn(file: tm_file_o) -> u64>,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            file: tm_file_o,
            buffer: *mut ::std::os::raw::c_void,
            size: u64,
        ) -> i64,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            file: tm_file_o,
            buffer: *const ::std::os::raw::c_void,
            size: u64,
        ) -> bool,
    >,
    pub read_at: ::std::option::Option<
        unsafe extern "C" fn(
            file: tm_file_o,
            offset: u64,
            buffer: *mut ::std::os::raw::c_void,
            size: u64,
        ) -> i64,
    >,
    pub write_at: ::std::option::Option<
        unsafe extern "C" fn(
            file: tm_file_o,
            offset: u64,
            buffer: *const ::std::os::raw::c_void,
            size: u64,
        ) -> bool,
    >,
    pub set_last_modified_time:
        ::std::option::Option<unsafe extern "C" fn(file: tm_file_o, time: tm_file_time_o)>,
    pub close: ::std::option::Option<unsafe extern "C" fn(file: tm_file_o)>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_file_stat_t {
    pub exists: bool,
    pub is_directory: bool,
    pub _padding_123: [::std::os::raw::c_char; 6usize],
    pub last_modified_time: tm_file_time_o,
    pub size: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_strings_t {
    pub count: u32,
    pub bytes: u32,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_file_system_watcher_o {
    pub opaque: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_file_system_detailed_watcher_o {
    _unused: [u8; 0],
}
pub const TM_FILE_SYSTEM_CHANGE_ACTION__ADDED: tm_file_system_change_action = 0;
pub const TM_FILE_SYSTEM_CHANGE_ACTION__REMOVED: tm_file_system_change_action = 1;
pub const TM_FILE_SYSTEM_CHANGE_ACTION__MODIFIED: tm_file_system_change_action = 2;
pub type tm_file_system_change_action = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_file_system_change_t {
    pub relative_path: *const ::std::os::raw::c_char,
    pub action: tm_file_system_change_action,
    pub _padding_182: [::std::os::raw::c_char; 4usize],
}
impl Default for tm_file_system_change_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_os_file_system_api {
    pub stat: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> tm_file_stat_t,
    >,
    pub directory_entries: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_strings_t,
    >,
    pub make_directory:
        ::std::option::Option<unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> bool>,
    pub remove_file:
        ::std::option::Option<unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> bool>,
    pub remove_directory:
        ::std::option::Option<unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> bool>,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            old_name: *const ::std::os::raw::c_char,
            new_name: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub copy_file: ::std::option::Option<
        unsafe extern "C" fn(
            from: *const ::std::os::raw::c_char,
            to: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub getcwd: ::std::option::Option<
        unsafe extern "C" fn(ta: *mut tm_temp_allocator_i) -> *const ::std::os::raw::c_char,
    >,
    pub chdir:
        ::std::option::Option<unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> bool>,
    pub is_absolute:
        ::std::option::Option<unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> bool>,
    pub absolute: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            ta: *mut tm_temp_allocator_i,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub temp_directory: ::std::option::Option<
        unsafe extern "C" fn(ta: *mut tm_temp_allocator_i) -> *const ::std::os::raw::c_char,
    >,
    pub create_watcher: ::std::option::Option<
        unsafe extern "C" fn(
            subtree_path: *const ::std::os::raw::c_char,
        ) -> tm_file_system_watcher_o,
    >,
    pub any_changes:
        ::std::option::Option<unsafe extern "C" fn(watcher: tm_file_system_watcher_o) -> bool>,
    pub destroy_watcher:
        ::std::option::Option<unsafe extern "C" fn(watcher: tm_file_system_watcher_o)>,
    pub create_detailed_watcher: ::std::option::Option<
        unsafe extern "C" fn(
            subtree_path: *const ::std::os::raw::c_char,
        ) -> *mut tm_file_system_detailed_watcher_o,
    >,
    pub detailed_changes: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut tm_file_system_detailed_watcher_o,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_file_system_change_t,
    >,
    pub destroy_detailed_watcher: ::std::option::Option<
        unsafe extern "C" fn(watcher: *mut tm_file_system_detailed_watcher_o),
    >,
    pub app_folder: ::std::option::Option<
        unsafe extern "C" fn(ta: *mut tm_temp_allocator_i) -> *const ::std::os::raw::c_char,
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_dll_o {
    pub handle: u64,
    pub valid: bool,
    pub _padding_278: [::std::os::raw::c_char; 7usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_os_dll_api {
    pub open: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> tm_dll_o,
    >,
    pub get: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> tm_dll_o,
    >,
    pub sym: ::std::option::Option<
        unsafe extern "C" fn(
            handle: tm_dll_o,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(handle: tm_dll_o)>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_socket_o {
    pub handle: u64,
    pub valid: bool,
    pub _padding_309: [::std::os::raw::c_char; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_socket_address_t {
    pub __bindgen_anon_1: tm_socket_address_t__bindgen_ty_1,
    pub port: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tm_socket_address_t__bindgen_ty_1 {
    pub ip: u32,
    pub ip_byte: [u8; 4usize],
}
impl Default for tm_socket_address_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tm_socket_address_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TM_OS_SOCKET_TYPE_TCP: tm_os_socket_type = 1;
pub const TM_OS_SOCKET_TYPE_UDP: tm_os_socket_type = 2;
pub type tm_os_socket_type = ::std::os::raw::c_int;
pub const TM_OS_SOCKET_ERROR_WOULD_BLOCK: tm_os_socket_error = -1000;
pub const TM_OS_SOCKET_ERROR_CLOSED: tm_os_socket_error = -1001;
pub const TM_OS_SOCKET_ERROR_INVALID: tm_os_socket_error = -1002;
pub const TM_OS_SOCKET_ERROR_OTHER: tm_os_socket_error = -1;
pub type tm_os_socket_error = ::std::os::raw::c_int;
pub const TM_OS_SOCKET_CONNECT_PENDING: tm_os_socket_connect = 0;
pub const TM_OS_SOCKET_CONNECT_ESTABLISHED: tm_os_socket_connect = 1;
pub const TM_OS_SOCKET_CONNECT_FAILED: tm_os_socket_connect = 2;
pub type tm_os_socket_connect = ::std::os::raw::c_int;
pub const TM_OS_SOCKET_GETADDRINFO_IN_PROGRESS: tm_os_socket_getaddrinfo = 0;
pub const TM_OS_SOCKET_GETADDRINFO_SUCCESS: tm_os_socket_getaddrinfo = 1;
pub const TM_OS_SOCKET_GETADDRINFO_ERROR: tm_os_socket_getaddrinfo = 2;
pub type tm_os_socket_getaddrinfo = ::std::os::raw::c_int;
pub const TM_SOCKET_OPTION__NODELAY: tm_os_socket_option = 0;
pub const TM_SOCKET_OPTION__NONBLOCK: tm_os_socket_option = 1;
pub type tm_os_socket_option = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_os_socket_api {
    pub init: ::std::option::Option<unsafe extern "C" fn()>,
    pub shutdown: ::std::option::Option<unsafe extern "C" fn()>,
    pub socket:
        ::std::option::Option<unsafe extern "C" fn(type_: tm_os_socket_type) -> tm_socket_o>,
    pub set_option: ::std::option::Option<
        unsafe extern "C" fn(socket: tm_socket_o, option: tm_os_socket_option, enabled: bool),
    >,
    pub bind: ::std::option::Option<
        unsafe extern "C" fn(socket: tm_socket_o, address: tm_socket_address_t) -> bool,
    >,
    pub getsockname: ::std::option::Option<
        unsafe extern "C" fn(socket: tm_socket_o, address: *mut tm_socket_address_t) -> bool,
    >,
    pub listen:
        ::std::option::Option<unsafe extern "C" fn(socket: tm_socket_o, queue_size: u32) -> bool>,
    pub accept: ::std::option::Option<
        unsafe extern "C" fn(socket: tm_socket_o, address: *mut tm_socket_address_t) -> tm_socket_o,
    >,
    pub connect: ::std::option::Option<
        unsafe extern "C" fn(
            socket: tm_socket_o,
            target: tm_socket_address_t,
        ) -> tm_os_socket_connect,
    >,
    pub send: ::std::option::Option<
        unsafe extern "C" fn(
            socket: tm_socket_o,
            buffer: *const ::std::os::raw::c_void,
            size: u32,
        ) -> i32,
    >,
    pub recv: ::std::option::Option<
        unsafe extern "C" fn(
            socket: tm_socket_o,
            buffer: *mut ::std::os::raw::c_void,
            size: u32,
        ) -> i32,
    >,
    pub sendto: ::std::option::Option<
        unsafe extern "C" fn(
            socket: tm_socket_o,
            buffer: *const ::std::os::raw::c_void,
            size: u32,
            target: tm_socket_address_t,
        ) -> i32,
    >,
    pub recvfrom: ::std::option::Option<
        unsafe extern "C" fn(
            socket: tm_socket_o,
            buffer: *mut ::std::os::raw::c_void,
            size: u32,
            source: *mut tm_socket_address_t,
        ) -> i32,
    >,
    pub close: ::std::option::Option<unsafe extern "C" fn(socket: tm_socket_o) -> bool>,
    pub getaddrinfo: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            service: *const ::std::os::raw::c_char,
            addresses: *mut tm_socket_address_t,
            size: u32,
        ) -> u32,
    >,
    pub getaddrinfo_async: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            service: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub getaddrinfo_result: ::std::option::Option<
        unsafe extern "C" fn(
            query: *mut ::std::os::raw::c_void,
            addresses: *mut tm_socket_address_t,
            count: *mut u32,
        ) -> tm_os_socket_getaddrinfo,
    >,
}
pub const TM_OS_THREAD__PRIORITY__LOWEST: tm_os_thread__priority = 0;
pub const TM_OS_THREAD__PRIOIRTY__LOW: tm_os_thread__priority = 1;
pub const TM_OS_THREAD__PRIORITY__NORMAL: tm_os_thread__priority = 2;
pub const TM_OS_THREAD__PRIORITY__HIGH: tm_os_thread__priority = 3;
pub const TM_OS_THREAD__PRIORITY__HIGHEST: tm_os_thread__priority = 4;
pub const TM_OS_THREAD__PRIORITY__TIME_CRITICAL: tm_os_thread__priority = 5;
pub type tm_os_thread__priority = ::std::os::raw::c_int;
pub type tm_thread_entry_f =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
pub type tm_fiber_entry_f =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_critical_section_o {
    pub opaque: [u64; 8usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_semaphore_o {
    pub opaque: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_thread_o {
    pub opaque: [u64; 2usize],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_fiber_o {
    pub opaque: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_os_thread_api {
    pub create_critical_section:
        ::std::option::Option<unsafe extern "C" fn(cs: *mut tm_critical_section_o)>,
    pub enter_critical_section:
        ::std::option::Option<unsafe extern "C" fn(cs: *mut tm_critical_section_o)>,
    pub leave_critical_section:
        ::std::option::Option<unsafe extern "C" fn(cs: *mut tm_critical_section_o)>,
    pub destroy_critical_section:
        ::std::option::Option<unsafe extern "C" fn(cs: *mut tm_critical_section_o)>,
    pub create_semaphore:
        ::std::option::Option<unsafe extern "C" fn(initial_count: u32) -> tm_semaphore_o>,
    pub semaphore_add: ::std::option::Option<unsafe extern "C" fn(sem: tm_semaphore_o, count: u32)>,
    pub semaphore_wait: ::std::option::Option<unsafe extern "C" fn(sem: tm_semaphore_o)>,
    pub semaphore_poll: ::std::option::Option<unsafe extern "C" fn(sem: tm_semaphore_o) -> bool>,
    pub destroy_semaphore: ::std::option::Option<unsafe extern "C" fn(sem: tm_semaphore_o)>,
    pub thread_id: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub processor_id: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub create_thread: ::std::option::Option<
        unsafe extern "C" fn(
            entry: tm_thread_entry_f,
            user_data: *mut ::std::os::raw::c_void,
            stack_size: u32,
            debug_name: *const ::std::os::raw::c_char,
        ) -> tm_thread_o,
    >,
    pub set_thread_priority: ::std::option::Option<
        unsafe extern "C" fn(thread: tm_thread_o, priority: tm_os_thread__priority),
    >,
    pub wait_for_thread: ::std::option::Option<unsafe extern "C" fn(thread: tm_thread_o)>,
    pub thread_id_from_tm_thread:
        ::std::option::Option<unsafe extern "C" fn(thread: tm_thread_o) -> u32>,
    pub convert_thread_to_fiber: ::std::option::Option<
        unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void) -> tm_fiber_o,
    >,
    pub convert_fiber_to_thread: ::std::option::Option<unsafe extern "C" fn()>,
    pub create_fiber: ::std::option::Option<
        unsafe extern "C" fn(
            entry: tm_fiber_entry_f,
            user_data: *mut ::std::os::raw::c_void,
            stack_size: u32,
        ) -> tm_fiber_o,
    >,
    pub destroy_fiber: ::std::option::Option<unsafe extern "C" fn(fiber: tm_fiber_o)>,
    pub switch_to_fiber: ::std::option::Option<unsafe extern "C" fn(fiber: tm_fiber_o)>,
    pub fiber_user_data:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub yield_processor: ::std::option::Option<unsafe extern "C" fn()>,
    pub sleep: ::std::option::Option<unsafe extern "C" fn(seconds: f64)>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_os_time_api {
    pub now: ::std::option::Option<unsafe extern "C" fn() -> tm_clock_o>,
    pub delta: ::std::option::Option<unsafe extern "C" fn(to: tm_clock_o, from: tm_clock_o) -> f64>,
    pub add:
        ::std::option::Option<unsafe extern "C" fn(from: tm_clock_o, delta: f64) -> tm_clock_o>,
    pub file_time_now: ::std::option::Option<unsafe extern "C" fn() -> tm_file_time_o>,
    pub file_time_delta: ::std::option::Option<
        unsafe extern "C" fn(to: tm_file_time_o, from: tm_file_time_o) -> f64,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_os_dialogs_open_t {
    pub extensions: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub allow_multi_select: bool,
    pub _padding_699: [::std::os::raw::c_char; 7usize],
}
impl Default for tm_os_dialogs_open_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_os_dialogs_open_res_t {
    pub num_files: u32,
    pub _padding_707: [::std::os::raw::c_char; 4usize],
    pub files: *mut *mut ::std::os::raw::c_char,
}
impl Default for tm_os_dialogs_open_res_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_os_dialogs_save_t {
    pub default_name: *const ::std::os::raw::c_char,
}
impl Default for tm_os_dialogs_save_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_os_dialogs_api {
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            s: *const tm_os_dialogs_open_t,
            ta: *mut tm_temp_allocator_i,
        ) -> tm_os_dialogs_open_res_t,
    >,
    pub open_folder: ::std::option::Option<
        unsafe extern "C" fn(ta: *mut tm_temp_allocator_i) -> *mut ::std::os::raw::c_char,
    >,
    pub save: ::std::option::Option<
        unsafe extern "C" fn(
            s: *const tm_os_dialogs_save_t,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub message_box: ::std::option::Option<
        unsafe extern "C" fn(
            title: *const ::std::os::raw::c_char,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub show_count: ::std::option::Option<unsafe extern "C" fn() -> u64>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_os_info_api {
    pub num_logical_processors: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub avx_support: ::std::option::Option<unsafe extern "C" fn() -> bool>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_os_debugger_api {
    pub is_debugger_present: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub debug_break: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_os_system_api {
    pub open_url: ::std::option::Option<unsafe extern "C" fn(url: *const ::std::os::raw::c_char)>,
    pub open_file:
        ::std::option::Option<unsafe extern "C" fn(file: *const ::std::os::raw::c_char) -> bool>,
    pub exe_path: ::std::option::Option<
        unsafe extern "C" fn(
            argv_0: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub execute: ::std::option::Option<
        unsafe extern "C" fn(command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub execute_in_background: ::std::option::Option<
        unsafe extern "C" fn(command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub execute_stdout: ::std::option::Option<
        unsafe extern "C" fn(
            command: *const ::std::os::raw::c_char,
            timeout_ms: u32,
            ta: *mut tm_temp_allocator_i,
            exit_code: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_os_api {
    pub virtual_memory: *mut tm_os_virtual_memory_api,
    pub file_io: *mut tm_os_file_io_api,
    pub file_system: *mut tm_os_file_system_api,
    pub dll: *mut tm_os_dll_api,
    pub socket: *mut tm_os_socket_api,
    pub thread: *mut tm_os_thread_api,
    pub time: *mut tm_os_time_api,
    pub dialogs: *mut tm_os_dialogs_api,
    pub info: *mut tm_os_info_api,
    pub debugger: *mut tm_os_debugger_api,
    pub system: *mut tm_os_system_api,
}
impl Default for tm_os_api {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_path_api {
    pub extension: ::std::option::Option<unsafe extern "C" fn(path: tm_str_t) -> tm_str_t>,
    pub extension_cstr: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
    >,
    pub strip_extension: ::std::option::Option<unsafe extern "C" fn(path: tm_str_t) -> tm_str_t>,
    pub base: ::std::option::Option<unsafe extern "C" fn(path: tm_str_t) -> tm_str_t>,
    pub base_cstr: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
    >,
    pub directory: ::std::option::Option<unsafe extern "C" fn(path: tm_str_t) -> tm_str_t>,
    pub pop_last: ::std::option::Option<unsafe extern "C" fn(path: *mut tm_str_t) -> tm_str_t>,
    pub pop_first: ::std::option::Option<unsafe extern "C" fn(path: *mut tm_str_t) -> tm_str_t>,
    pub split_all: ::std::option::Option<
        unsafe extern "C" fn(path: tm_str_t, ta: *mut tm_temp_allocator_i) -> *mut tm_str_t,
    >,
    pub join: ::std::option::Option<
        unsafe extern "C" fn(a: tm_str_t, b: tm_str_t, ta: *mut tm_temp_allocator_i) -> tm_str_t,
    >,
}
pub type tm_plugin_load_f =
    ::std::option::Option<unsafe extern "C" fn(reg: *mut tm_api_registry_api, load: bool)>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_plugins_api {
    pub load: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char, hot_reload: bool) -> u64,
    >,
    pub unload: ::std::option::Option<unsafe extern "C" fn(plugin: u64)>,
    pub reload: ::std::option::Option<unsafe extern "C" fn(plugin: u64)>,
    pub set_path: ::std::option::Option<
        unsafe extern "C" fn(plugin: u64, path: *const ::std::os::raw::c_char),
    >,
    pub check_hot_reload: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub reload_count: ::std::option::Option<unsafe extern "C" fn() -> u64>,
    pub enumerate: ::std::option::Option<
        unsafe extern "C" fn(
            directory: *const ::std::os::raw::c_char,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut *const ::std::os::raw::c_char,
    >,
    pub load_plugin_context:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub plugin_dllpath: ::std::option::Option<
        unsafe extern "C" fn(
            ta: *mut tm_temp_allocator_i,
            exe: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub app_dllpath: ::std::option::Option<
        unsafe extern "C" fn(
            ta: *mut tm_temp_allocator_i,
            exe: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
}
pub const TM_TT_PROP__PLUGIN__IMPORT_ON_CHANGE: TM_TT_PROP__PLUGIN = 0;
pub const TM_TT_PROP__PLUGIN__WINDOWS_DLL_IMPORT_PATH: TM_TT_PROP__PLUGIN = 1;
pub const TM_TT_PROP__PLUGIN__WINDOWS_DLL: TM_TT_PROP__PLUGIN = 2;
pub const TM_TT_PROP__PLUGIN__LINUX_DLL_IMPORT_PATH: TM_TT_PROP__PLUGIN = 3;
pub const TM_TT_PROP__PLUGIN__LINUX_DLL: TM_TT_PROP__PLUGIN = 4;
pub const TM_TT_PROP__PLUGIN__IS_HELPER: TM_TT_PROP__PLUGIN = 5;
pub type TM_TT_PROP__PLUGIN = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_plugin_assets_api {
    pub any_plugins: ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o) -> bool>,
    pub init_truth: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, allow_code_execution: bool),
    >,
    pub shutdown_truth: ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o)>,
    pub update_truth: ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o)>,
    pub allow_code_execution:
        ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o) -> bool>,
    pub set_allow_code_execution: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, allow_code_execution: bool),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_plugin_init_i {
    pub inst: *mut tm_plugin_o,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_plugin_o, allocator: *mut tm_allocator_i),
    >,
}
impl Default for tm_plugin_init_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_plugin_shutdown_i {
    pub inst: *mut tm_plugin_o,
    pub shutdown: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_plugin_o)>,
}
impl Default for tm_plugin_shutdown_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_plugin_tick_i {
    pub inst: *mut tm_plugin_o,
    pub tick: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_plugin_o, dt: f32)>,
}
impl Default for tm_plugin_tick_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_plugin_set_the_truth_i {
    pub inst: *mut tm_plugin_o,
    pub set_the_truth: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_plugin_o, tt: *mut tm_the_truth_o),
    >,
}
impl Default for tm_plugin_set_the_truth_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TM_PROFILER_EVENT_TYPE_BEGIN: tm_profiler_event_type = 0;
pub const TM_PROFILER_EVENT_TYPE_END: tm_profiler_event_type = 1;
pub const TM_PROFILER_EVENT_TYPE_INSTANT: tm_profiler_event_type = 2;
pub const TM_PROFILER_EVENT_TYPE_START: tm_profiler_event_type = 3;
pub const TM_PROFILER_EVENT_TYPE_FINISH: tm_profiler_event_type = 4;
pub const TM_PROFILER_EVENT_TYPE_FIBER_SWITCH: tm_profiler_event_type = 5;
pub type tm_profiler_event_type = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_profiler_event_t {
    pub type_: u32,
    pub thread_id: u32,
    pub time_stamp: u64,
    pub __bindgen_anon_1: tm_profiler_event_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tm_profiler_event_t__bindgen_ty_1 {
    pub __bindgen_anon_1: tm_profiler_event_t__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: tm_profiler_event_t__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_profiler_event_t__bindgen_ty_1__bindgen_ty_1 {
    pub id: u32,
    pub _padding_51: [::std::os::raw::c_char; 4usize],
    pub category: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub object: *const ::std::os::raw::c_char,
}
impl Default for tm_profiler_event_t__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_profiler_event_t__bindgen_ty_1__bindgen_ty_2 {
    pub from_fiber: u32,
    pub to_fiber: u32,
}
impl Default for tm_profiler_event_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tm_profiler_event_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_profiler_buffer_t {
    pub total_recorded: u64,
    pub start: [u64; 2usize],
    pub events: [*const tm_profiler_event_t; 2usize],
    pub count: [u32; 2usize],
}
impl Default for tm_profiler_buffer_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_profiler_api {
    pub init: ::std::option::Option<
        unsafe extern "C" fn(allocator: *mut tm_allocator_i, event_buffer_size: u32),
    >,
    pub shutdown: ::std::option::Option<unsafe extern "C" fn()>,
    pub enabled: *mut bool,
    pub begin: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            category: *const ::std::os::raw::c_char,
            object: *const ::std::os::raw::c_char,
        ) -> u64,
    >,
    pub end: ::std::option::Option<unsafe extern "C" fn(begin_id: u64)>,
    pub instant: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            category: *const ::std::os::raw::c_char,
            object: *const ::std::os::raw::c_char,
        ),
    >,
    pub start: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            category: *const ::std::os::raw::c_char,
            object: *const ::std::os::raw::c_char,
        ) -> u64,
    >,
    pub finish: ::std::option::Option<unsafe extern "C" fn(start_id: u64)>,
    pub intern: ::std::option::Option<
        unsafe extern "C" fn(s: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
    >,
    pub fiber_switch: ::std::option::Option<unsafe extern "C" fn(from_fiber: u32, to_fiber: u32)>,
    pub submit:
        ::std::option::Option<unsafe extern "C" fn(events: *mut tm_profiler_event_t, count: u32)>,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            dest: *mut tm_profiler_event_t,
            start: u64,
            count: u32,
            actual_start: *mut u64,
            actual_count: *mut u32,
        ),
    >,
    pub buffer: ::std::option::Option<unsafe extern "C" fn() -> tm_profiler_buffer_t>,
}
impl Default for tm_profiler_api {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_task_progress_t {
    pub num_tasks: u32,
    pub task_index: u32,
    pub text: *const ::std::os::raw::c_char,
    pub fraction: f32,
    pub _padding_32: [::std::os::raw::c_char; 4usize],
}
impl Default for tm_task_progress_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_task_status_t {
    pub num_tasks: u32,
    pub _padding_40: [::std::os::raw::c_char; 4usize],
    pub task_id: *mut u64,
    pub text: *mut *const ::std::os::raw::c_char,
    pub fraction: *mut f32,
}
impl Default for tm_task_status_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_progress_report_api {
    pub create:
        ::std::option::Option<unsafe extern "C" fn(a: *mut tm_allocator_i, task_display_time: f32)>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn()>,
    pub update: ::std::option::Option<
        unsafe extern "C" fn(dt: f64, ta: *mut tm_temp_allocator_i) -> tm_task_progress_t,
    >,
    pub status: ::std::option::Option<
        unsafe extern "C" fn(ta: *mut tm_temp_allocator_i) -> tm_task_status_t,
    >,
    pub idle: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub set_task_progress: ::std::option::Option<
        unsafe extern "C" fn(task: u64, text: *const ::std::os::raw::c_char, fraction: f32),
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_random_api {
    pub next: ::std::option::Option<unsafe extern "C" fn() -> u64>,
    pub next_n: ::std::option::Option<unsafe extern "C" fn(res: *mut u64, n: u32)>,
    pub seed_new_state: ::std::option::Option<unsafe extern "C" fn(s: *mut u64)>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_runtime_data_t {
    pub version: u64,
    pub data: *mut ::std::os::raw::c_void,
}
impl Default for tm_runtime_data_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_runtime_data_io_i {
    pub load: ::std::option::Option<
        unsafe extern "C" fn(
            io_context: *mut ::std::os::raw::c_void,
            tt: *mut tm_the_truth_o,
            id: tm_tt_id_t,
            result_runtime_data: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub unload: ::std::option::Option<
        unsafe extern "C" fn(
            io_context: *mut ::std::os::raw::c_void,
            runtime_data: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_runtime_data_repository_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_runtime_data_repository_api {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: *mut tm_allocator_i,
            tt: *mut tm_the_truth_o,
            type_: tm_tt_type_t,
            runtime_data_size: u32,
            io_interface: *mut tm_runtime_data_io_i,
        ) -> *mut tm_runtime_data_repository_o,
    >,
    pub destroy: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_runtime_data_repository_o,
            io_context: *mut ::std::os::raw::c_void,
        ),
    >,
    pub lookup: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_runtime_data_repository_o,
            id: tm_tt_id_t,
            wanted_version: u64,
            io_context: *mut ::std::os::raw::c_void,
        ) -> tm_runtime_data_t,
    >,
    pub garbage_collect: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_runtime_data_repository_o,
            io_context: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SHA1_CTX {
    pub state: [u32; 5usize],
    pub count: [u32; 2usize],
    pub buffer: [u8; 64usize],
}
impl Default for SHA1_CTX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type tm_sprintf_printer = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        type_: tm_str_t,
        args: tm_str_t,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_sprintf_api {
    pub print_unsafe: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
    >,
    pub print: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
            fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
    >,
    pub vprint_unsafe: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_char,
            fmt: *const ::std::os::raw::c_char,
            va: va_list,
        ) -> ::std::os::raw::c_int,
    >,
    pub vprint: ::std::option::Option<
        unsafe extern "C" fn(
            buf: *mut ::std::os::raw::c_char,
            count: ::std::os::raw::c_int,
            fmt: *const ::std::os::raw::c_char,
            va: va_list,
        ) -> ::std::os::raw::c_int,
    >,
    pub add_printer: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char, printer: tm_sprintf_printer),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_set_strhash_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_string_api {
    pub find_unique_name: ::std::option::Option<
        unsafe extern "C" fn(
            taken_names: *mut tm_set_strhash_t,
            ignore_case: bool,
            desired_name: *const ::std::os::raw::c_char,
            separator: *const ::std::os::raw::c_char,
            ta: *mut tm_temp_allocator_i,
        ) -> *const ::std::os::raw::c_char,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_string_repository_i {
    pub inst: *mut tm_string_repository_o,
    pub add: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_string_repository_o,
            s: *const ::std::os::raw::c_char,
        ) -> tm_strhash_t,
    >,
    pub retain: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_string_repository_o, hash: tm_strhash_t),
    >,
    pub remove: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_string_repository_o, hash: tm_strhash_t),
    >,
    pub lookup: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_string_repository_o,
            hash: tm_strhash_t,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub intern: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_string_repository_o,
            s: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
}
impl Default for tm_string_repository_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_string_repository_api {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(a: *mut tm_allocator_i) -> *mut tm_string_repository_i,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(i: *mut tm_string_repository_i)>,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_task_system_api {
    pub run_task: ::std::option::Option<
        unsafe extern "C" fn(
            f: ::std::option::Option<
                unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, id: u64),
            >,
            data: *mut ::std::os::raw::c_void,
            debug_name: *const ::std::os::raw::c_char,
        ) -> u64,
    >,
    pub is_task_done: ::std::option::Option<unsafe extern "C" fn(id: u64) -> bool>,
    pub is_task_done_else_assist: ::std::option::Option<unsafe extern "C" fn(id: u64) -> bool>,
    pub cancel_task: ::std::option::Option<unsafe extern "C" fn(id: u64)>,
    pub is_task_canceled: ::std::option::Option<unsafe extern "C" fn(id: u64) -> bool>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_temp_allocator_i {
    pub inst: *mut tm_temp_allocator_o,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_temp_allocator_o,
            ptr: *mut ::std::os::raw::c_void,
            old_size: u64,
            new_size: u64,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
impl Default for tm_temp_allocator_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_temp_allocator_1024_o {
    pub ta: tm_temp_allocator_i,
    pub buffer: [::std::os::raw::c_char; 1024usize],
    pub backing: *mut tm_allocator_i,
    pub first_block: *mut ::std::os::raw::c_void,
}
impl Default for tm_temp_allocator_1024_o {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_temp_allocator_statistics_t {
    pub temp_allocation_blocks: u64,
    pub temp_allocation_bytes: u64,
    pub frame_allocation_blocks: u64,
    pub frame_allocation_bytes: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_temp_allocator_api {
    pub init_1024: ::std::option::Option<
        unsafe extern "C" fn(ta: *mut tm_temp_allocator_1024_o, backing: *mut tm_allocator_i),
    >,
    pub shutdown_1024:
        ::std::option::Option<unsafe extern "C" fn(ta: *mut tm_temp_allocator_1024_o)>,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(backing: *mut tm_allocator_i) -> *mut tm_temp_allocator_i,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(ta: *mut tm_temp_allocator_i)>,
    pub allocator: ::std::option::Option<
        unsafe extern "C" fn(a: *mut tm_allocator_i, ta: *mut tm_temp_allocator_i),
    >,
    pub frame_alloc:
        ::std::option::Option<unsafe extern "C" fn(size: u64) -> *mut ::std::os::raw::c_void>,
    pub frame_allocator: ::std::option::Option<unsafe extern "C" fn() -> *mut tm_allocator_i>,
    pub tick_frame: ::std::option::Option<unsafe extern "C" fn()>,
    pub printf: ::std::option::Option<
        unsafe extern "C" fn(
            ta: *mut tm_temp_allocator_i,
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub vprintf: ::std::option::Option<
        unsafe extern "C" fn(
            ta: *mut tm_temp_allocator_i,
            format: *const ::std::os::raw::c_char,
            args: va_list,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub frame_printf: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            ...
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub frame_vprintf: ::std::option::Option<
        unsafe extern "C" fn(
            format: *const ::std::os::raw::c_char,
            args: va_list,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub statistics: *mut tm_temp_allocator_statistics_t,
}
impl Default for tm_temp_allocator_api {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_hash_id_to_id_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_set_t {
    _unused: [u8; 0],
}
pub const TM_THE_TRUTH_PROPERTY_TYPE_NONE: tm_the_truth_property_type = 0;
pub const TM_THE_TRUTH_PROPERTY_TYPE_BOOL: tm_the_truth_property_type = 1;
pub const TM_THE_TRUTH_PROPERTY_TYPE_UINT32_T: tm_the_truth_property_type = 2;
pub const TM_THE_TRUTH_PROPERTY_TYPE_UINT64_T: tm_the_truth_property_type = 3;
pub const TM_THE_TRUTH_PROPERTY_TYPE_FLOAT: tm_the_truth_property_type = 4;
pub const TM_THE_TRUTH_PROPERTY_TYPE_DOUBLE: tm_the_truth_property_type = 5;
pub const TM_THE_TRUTH_PROPERTY_TYPE_STRING: tm_the_truth_property_type = 6;
pub const TM_THE_TRUTH_PROPERTY_TYPE_BUFFER: tm_the_truth_property_type = 7;
pub const TM_THE_TRUTH_PROPERTY_TYPE_REFERENCE: tm_the_truth_property_type = 8;
pub const TM_THE_TRUTH_PROPERTY_TYPE_SUBOBJECT: tm_the_truth_property_type = 9;
pub const TM_THE_TRUTH_PROPERTY_TYPE_REFERENCE_SET: tm_the_truth_property_type = 10;
pub const TM_THE_TRUTH_PROPERTY_TYPE_SUBOBJECT_SET: tm_the_truth_property_type = 11;
pub const TM_THE_TRUTH_NUM_PROPERTY_TYPES: tm_the_truth_property_type = 12;
pub type tm_the_truth_property_type = ::std::os::raw::c_int;
pub const TM_THE_TRUTH__EDITOR__DEFAULT: tm_the_truth_editor = 0;
pub const TM_THE_TRUTH__EDITOR__HIDDEN: tm_the_truth_editor = 1;
pub const TM_THE_TRUTH__EDITOR__UINT32_T__ENUM: tm_the_truth_editor = 2;
pub const TM_THE_TRUTH__EDITOR__STRING__OPEN_PATH: tm_the_truth_editor = 3;
pub const TM_THE_TRUTH__EDITOR__STRING__SAVE_PATH: tm_the_truth_editor = 4;
pub type tm_the_truth_editor = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_editor_enum_t {
    pub count: u32,
    pub _padding_357: [::std::os::raw::c_char; 4usize],
    pub names: *const *const ::std::os::raw::c_char,
    pub tooltips: *const *const ::std::os::raw::c_char,
}
impl Default for tm_the_truth_editor_enum_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_editor_string_open_path_t {
    pub extensions: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
}
impl Default for tm_the_truth_editor_string_open_path_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_editor_string_save_path_t {
    pub default_file_name: *const ::std::os::raw::c_char,
}
impl Default for tm_the_truth_editor_string_save_path_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_object_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_property_definition_t {
    pub name: *const ::std::os::raw::c_char,
    pub type_: u32,
    pub editor: u32,
    pub __bindgen_anon_1: tm_the_truth_property_definition_t__bindgen_ty_1,
    pub type_hash: tm_strhash_t,
    pub allow_other_types: bool,
    pub _padding_451: [::std::os::raw::c_char; 7usize],
    pub buffer_extension: *const ::std::os::raw::c_char,
    pub buffer_extension_f: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: tm_tt_id_t,
            property: u32,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tooltip: *const ::std::os::raw::c_char,
    pub not_serialized: bool,
    pub _padding_469: [::std::os::raw::c_char; 7usize],
    pub ui_name: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tm_the_truth_property_definition_t__bindgen_ty_1 {
    pub enum_editor: tm_the_truth_editor_enum_t,
    pub string_open_path_editor: tm_the_truth_editor_string_open_path_t,
    pub string_save_path_editor: tm_the_truth_editor_string_save_path_t,
}
impl Default for tm_the_truth_property_definition_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tm_the_truth_property_definition_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type tm_the_truth_create_types_i =
    ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o)>;
pub type tm_the_truth_destroyed_i =
    ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o)>;
pub const TM_THE_TRUTH_CREATE_TYPES_NONE: tm_the_truth_create_types = 0;
pub const TM_THE_TRUTH_CREATE_TYPES_ALL: tm_the_truth_create_types = 1;
pub type tm_the_truth_create_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_get_types_with_aspect_t {
    pub type_: tm_tt_type_t,
    pub data: *mut ::std::os::raw::c_void,
}
impl Default for tm_the_truth_get_types_with_aspect_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_get_aspects_t {
    pub id: tm_strhash_t,
    pub data: *mut ::std::os::raw::c_void,
}
impl Default for tm_the_truth_get_aspects_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_local_set_t {
    pub num_added: u32,
    pub _padding_524: [::std::os::raw::c_char; 4usize],
    pub added: *const tm_tt_id_t,
    pub num_removed: u32,
    pub _padding_529: [::std::os::raw::c_char; 4usize],
    pub removed: *const tm_tt_id_t,
    pub num_instantiated: u32,
    pub _padding_534: [::std::os::raw::c_char; 4usize],
    pub instantiated: *const tm_tt_id_t,
}
impl Default for tm_the_truth_local_set_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_set_local_subobject_set_t {
    pub num_added: u32,
    pub _padding_543: [::std::os::raw::c_char; 4usize],
    pub added: *mut *mut tm_the_truth_object_o,
    pub num_removed: u32,
    pub _padding_548: [::std::os::raw::c_char; 4usize],
    pub removed: *const tm_tt_id_t,
    pub num_instantiated: u32,
    pub _padding_553: [::std::os::raw::c_char; 4usize],
    pub instantiated: *mut *mut tm_the_truth_object_o,
}
impl Default for tm_the_truth_set_local_subobject_set_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_changed_objects_t {
    pub overflow: bool,
    pub _padding_563: [::std::os::raw::c_char; 3usize],
    pub num_objects: u32,
    pub objects: *mut tm_tt_id_t,
    pub version: u64,
}
impl Default for tm_the_truth_changed_objects_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_hash_u64_to_id_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_interop_context_t {
    pub to_tt: *mut tm_the_truth_o,
    pub from_tt: *mut tm_the_truth_o,
    pub type_lookup: *mut tm_hash32_t,
    pub property_lookup: *mut tm_hash32_t,
    pub buffer_lookup: *mut tm_hash32_t,
    pub object_lookup: *mut tm_hash_u64_to_id_t,
}
impl Default for tm_the_truth_interop_context_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TM_TT_PROTOTYPE_RELATION_ADDED: tm_the_truth_prototype_relation = 0;
pub const TM_TT_PROTOTYPE_RELATION_ASSET: tm_the_truth_prototype_relation = 1;
pub const TM_TT_PROTOTYPE_RELATION_INHERITED: tm_the_truth_prototype_relation = 2;
pub const TM_TT_PROTOTYPE_RELATION_INSTANTIATED: tm_the_truth_prototype_relation = 3;
pub const TM_TT_PROTOTYPE_RELATION_REMOVED: tm_the_truth_prototype_relation = 4;
pub const TM_TT_PROTOTYPE_RELATION_NONE: tm_the_truth_prototype_relation = 5;
pub type tm_the_truth_prototype_relation = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_tt_buffer_t {
    pub id: u32,
    pub _padding_627: [::std::os::raw::c_char; 4usize],
    pub size: u64,
    pub data: *const ::std::os::raw::c_void,
    pub hash: u64,
}
impl Default for tm_tt_buffer_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_tt_prop_value_t {
    pub type_: tm_the_truth_property_type,
    pub _padding_643: [::std::os::raw::c_char; 4usize],
    pub __bindgen_anon_1: tm_tt_prop_value_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tm_tt_prop_value_t__bindgen_ty_1 {
    pub b: bool,
    pub u32_: u32,
    pub u64_: u64,
    pub f32_: f32,
    pub f64_: f64,
    pub string: *const ::std::os::raw::c_char,
    pub buffer: tm_tt_buffer_t,
    pub object: tm_tt_id_t,
    pub set: *const tm_tt_id_t,
}
impl Default for tm_tt_prop_value_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for tm_tt_prop_value_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_tt_undo_action_t {
    pub before: *const tm_the_truth_object_o,
    pub after: *const tm_the_truth_object_o,
}
impl Default for tm_tt_undo_action_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_tt_serialize_options_t {
    pub serialize_buffers_as_hashes: bool,
    pub skip_type_index: bool,
    pub _padding_684: [::std::os::raw::c_char; 6usize],
    pub types: *mut tm_set_t,
}
impl Default for tm_tt_serialize_options_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TM_THE_TRUTH_MAX_PROPERTIES: ::std::os::raw::c_int = 64;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_serialized_type_info_t {
    pub runtime_type: tm_tt_type_t,
    pub properties_differ: bool,
    pub _padding_706: [::std::os::raw::c_char; 3usize],
    pub num_properties: u32,
    pub serialized_property_to_runtime_property: [u32; 64usize],
    pub serialized_property_type: [u32; 64usize],
}
impl Default for tm_the_truth_serialized_type_info_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_tt_deserialize_options_t {
    pub buffers_preloaded: bool,
    pub skip_type_index: bool,
    pub _padding_731: [::std::os::raw::c_char; 6usize],
    pub type_infos: *const tm_the_truth_serialized_type_info_t,
}
impl Default for tm_tt_deserialize_options_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_tt_serialize_changes_options_t {
    pub no_header: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_tt_deserialize_changes_options_t {
    pub header: *const ::std::os::raw::c_char,
}
impl Default for tm_tt_deserialize_changes_options_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_tt_memory_use_t {
    pub resident: u64,
    pub unloaded: u64,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_the_truth_api {
    pub allocator:
        ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o) -> *mut tm_allocator_i>,
    pub buffers:
        ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o) -> *mut tm_buffers_i>,
    pub streamable_buffers: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o) -> *mut tm_streamable_buffers_i,
    >,
    pub create_object_type: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            name: *const ::std::os::raw::c_char,
            properties: *const tm_the_truth_property_definition_t,
            num_properties: u32,
        ) -> tm_tt_type_t,
    >,
    pub set_default_object: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object_type: tm_tt_type_t,
            object: tm_tt_id_t,
        ),
    >,
    pub set_default_object_to_create_subobjects: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, object_type: tm_tt_type_t),
    >,
    pub default_object: ::std::option::Option<
        unsafe extern "C" fn(tt: *const tm_the_truth_o, object_type: tm_tt_type_t) -> tm_tt_id_t,
    >,
    pub is_default: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> bool,
    >,
    pub set_aspect: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object_type: tm_tt_type_t,
            aspect: tm_strhash_t,
            data: *const ::std::os::raw::c_void,
        ),
    >,
    pub set_default_aspect: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            aspect: tm_strhash_t,
            data: *const ::std::os::raw::c_void,
        ),
    >,
    pub set_property_aspect: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object_type: tm_tt_type_t,
            property: u32,
            aspect: tm_strhash_t,
            data: *const ::std::os::raw::c_void,
        ),
    >,
    pub reload_aspects: ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o)>,
    pub object_type_from_name_hash: ::std::option::Option<
        unsafe extern "C" fn(tt: *const tm_the_truth_o, name_hash: tm_strhash_t) -> tm_tt_type_t,
    >,
    pub optional_object_type_from_name_hash: ::std::option::Option<
        unsafe extern "C" fn(tt: *const tm_the_truth_o, name_hash: tm_strhash_t) -> tm_tt_type_t,
    >,
    pub num_types: ::std::option::Option<unsafe extern "C" fn(tt: *const tm_the_truth_o) -> u32>,
    pub type_name: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object_type: tm_tt_type_t,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub type_name_hash: ::std::option::Option<
        unsafe extern "C" fn(tt: *const tm_the_truth_o, object_type: tm_tt_type_t) -> tm_strhash_t,
    >,
    pub num_properties: ::std::option::Option<
        unsafe extern "C" fn(tt: *const tm_the_truth_o, object_type: tm_tt_type_t) -> u32,
    >,
    pub properties: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object_type: tm_tt_type_t,
        ) -> *const tm_the_truth_property_definition_t,
    >,
    pub find_property: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object_type: tm_tt_type_t,
            name_hash: tm_strhash_t,
            type_: u32,
            res: *mut u32,
        ) -> bool,
    >,
    pub property_index: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            type_: tm_tt_type_t,
            name_hash: tm_strhash_t,
        ) -> u32,
    >,
    pub has_property: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            type_: tm_tt_type_t,
            name_hash: tm_strhash_t,
        ) -> u32,
    >,
    pub get_aspect: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object_type: tm_tt_type_t,
            aspect: tm_strhash_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub get_types_with_aspect: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            aspect: tm_strhash_t,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_the_truth_get_types_with_aspect_t,
    >,
    pub get_aspects: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object_type: tm_tt_type_t,
        ) -> *const tm_the_truth_get_aspects_t,
    >,
    pub get_property_aspect: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object_type: tm_tt_type_t,
            property: u32,
            aspect: tm_strhash_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub all_objects_of_type: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object_type: tm_tt_type_t,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_tt_id_t,
    >,
    pub create_undo_scope: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            name: *const ::std::os::raw::c_char,
        ) -> tm_tt_undo_scope_t,
    >,
    pub create_thread_safe_undo_scope: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            name: *const ::std::os::raw::c_char,
        ) -> tm_tt_undo_scope_t,
    >,
    pub undo_scope_name: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            scope: tm_tt_undo_scope_t,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub undo_scope_objects: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            scope: tm_tt_undo_scope_t,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_tt_id_t,
    >,
    pub undo_scope_actions: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            scope: tm_tt_undo_scope_t,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_tt_undo_action_t,
    >,
    pub undo: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, scope: tm_tt_undo_scope_t),
    >,
    pub redo: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, scope: tm_tt_undo_scope_t),
    >,
    pub create_object_of_type: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            type_: tm_tt_type_t,
            undo_scope: tm_tt_undo_scope_t,
        ) -> tm_tt_id_t,
    >,
    pub create_object_of_hash: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            type_name_hash: tm_strhash_t,
            undo_scope: tm_tt_undo_scope_t,
        ) -> tm_tt_id_t,
    >,
    pub create_object_from_prototype: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            prototype: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ) -> tm_tt_id_t,
    >,
    pub clone_object: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ) -> tm_tt_id_t,
    >,
    pub instantiate_subobject: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            undo_scope: tm_tt_undo_scope_t,
        ) -> tm_tt_id_t,
    >,
    pub remove_instantiated_subobject: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub instantiate_subobject_from_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            subobject: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ) -> tm_tt_id_t,
    >,
    pub remove_instantiated_subobject_from_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            subobject: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub add_instantiated_subobject_back_to_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            subobject: tm_tt_id_t,
        ),
    >,
    pub id: ::std::option::Option<
        unsafe extern "C" fn(obj: *const tm_the_truth_object_o) -> tm_tt_id_t,
    >,
    pub destroy_object: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub destroy_objects: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *const tm_tt_id_t,
            n: u32,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub garbage_collect: ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o)>,
    pub is_alive: ::std::option::Option<
        unsafe extern "C" fn(tt: *const tm_the_truth_o, object: tm_tt_id_t) -> bool,
    >,
    pub interop_ensure_compatibility:
        ::std::option::Option<unsafe extern "C" fn(ctx: *mut tm_the_truth_interop_context_t)>,
    pub interop_clone_object: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut tm_the_truth_interop_context_t,
            object: tm_tt_id_t,
        ) -> tm_tt_id_t,
    >,
    pub deep_clone_assets: ::std::option::Option<
        unsafe extern "C" fn(
            to_tt: *mut tm_the_truth_o,
            from_tt: *const tm_the_truth_o,
            assets: *const tm_tt_id_t,
            n: u32,
            undo_scope: tm_tt_undo_scope_t,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_tt_id_t,
    >,
    pub uuid: ::std::option::Option<
        unsafe extern "C" fn(tt: *const tm_the_truth_o, object: tm_tt_id_t) -> tm_uuid_t,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: tm_tt_id_t,
        ) -> *const tm_the_truth_object_o,
    >,
    pub get_bool: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> bool,
    >,
    pub get_uint32_t: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> u32,
    >,
    pub get_uint64_t: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> u64,
    >,
    pub get_float: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> f32,
    >,
    pub get_double: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> f64,
    >,
    pub get_string: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub get_string_hash: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_strhash_t,
    >,
    pub get_str: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_str_t,
    >,
    pub get_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_tt_buffer_t,
    >,
    pub get_reference: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_tt_id_t,
    >,
    pub get_subobject: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_tt_id_t,
    >,
    pub get_property_value: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
            ta: *mut tm_temp_allocator_i,
        ) -> tm_tt_prop_value_t,
    >,
    pub property_value_equal: ::std::option::Option<
        unsafe extern "C" fn(a: tm_tt_prop_value_t, b: tm_tt_prop_value_t) -> bool,
    >,
    pub get_reference_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
            ta: *mut tm_temp_allocator_i,
        ) -> *const tm_tt_id_t,
    >,
    pub get_subobject_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
            ta: *mut tm_temp_allocator_i,
        ) -> *const tm_tt_id_t,
    >,
    pub get_reference_set_size: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> u64,
    >,
    pub get_subobject_set_size: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> u64,
    >,
    pub get_subobject_set_locally_removed: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
            ta: *mut tm_temp_allocator_i,
        ) -> *const tm_tt_id_t,
    >,
    pub find_subobject_of_type: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
            type_: tm_tt_type_t,
        ) -> tm_tt_id_t,
    >,
    pub is_subobject_of: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
            subobject: tm_tt_id_t,
        ) -> bool,
    >,
    pub is_in_reference_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
            object: tm_tt_id_t,
        ) -> bool,
    >,
    pub property_index_of_subobject: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: tm_tt_id_t,
            subobject: tm_tt_id_t,
        ) -> u32,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: tm_tt_id_t,
        ) -> *mut tm_the_truth_object_o,
    >,
    pub commit: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub commit_range: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut *mut tm_the_truth_object_o,
            n: u32,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub retarget_write: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            object: tm_tt_id_t,
        ),
    >,
    pub try_write: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: tm_tt_id_t,
            original: *mut *const tm_the_truth_object_o,
        ) -> *mut tm_the_truth_object_o,
    >,
    pub try_commit: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            original: *const tm_the_truth_object_o,
            undo_scope: tm_tt_undo_scope_t,
        ) -> bool,
    >,
    pub set_bool: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: bool,
        ),
    >,
    pub set_uint32_t: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: u32,
        ),
    >,
    pub set_uint64_t: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: u64,
        ),
    >,
    pub set_float: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: f32,
        ),
    >,
    pub set_double: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: f64,
        ),
    >,
    pub set_string: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: *const ::std::os::raw::c_char,
        ),
    >,
    pub set_str: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: tm_str_t,
        ),
    >,
    pub set_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: u32,
        ),
    >,
    pub set_buffer_content: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            p: *mut ::std::os::raw::c_void,
            size: u64,
        ),
    >,
    pub set_reference: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: tm_tt_id_t,
        ),
    >,
    pub set_subobject: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: *mut tm_the_truth_object_o,
        ),
    >,
    pub set_subobject_id: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub set_property_value: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            value: tm_tt_prop_value_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub clear: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
        ),
    >,
    pub clear_object: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, obj: *mut tm_the_truth_object_o),
    >,
    pub propagate_property: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: tm_tt_id_t,
            property: u32,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub propagate_property_except: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: tm_tt_id_t,
            property: u32,
            skip: *const tm_tt_id_t,
            num_skip: u32,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub propagate_property_subobject: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: tm_tt_id_t,
            property: u32,
            subobject: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub propagate_object: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub propagate_object_except: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: tm_tt_id_t,
            skip: *const tm_tt_id_t,
            num_skip: u32,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub add_to_reference_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            items: *const tm_tt_id_t,
            count: u32,
        ),
    >,
    pub remove_from_reference_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            items: *const tm_tt_id_t,
            count: u32,
        ),
    >,
    pub clear_reference_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
        ),
    >,
    pub remove_from_prototype_reference_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            items: *const tm_tt_id_t,
            count: u32,
        ),
    >,
    pub cancel_remove_from_prototype_reference_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            items: *const tm_tt_id_t,
            count: u32,
        ),
    >,
    pub add_to_subobject_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            items: *mut *mut tm_the_truth_object_o,
            count: u32,
        ),
    >,
    pub remove_from_subobject_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            items: *const tm_tt_id_t,
            count: u32,
        ),
    >,
    pub clear_subobject_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
        ),
    >,
    pub remove_from_prototype_subobject_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            items: *const tm_tt_id_t,
            count: u32,
        ),
    >,
    pub cancel_remove_from_prototype_subobject_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            items: *const tm_tt_id_t,
            count: u32,
        ),
    >,
    pub prototype: ::std::option::Option<
        unsafe extern "C" fn(tt: *const tm_the_truth_o, object: tm_tt_id_t) -> tm_tt_id_t,
    >,
    pub owner: ::std::option::Option<
        unsafe extern "C" fn(tt: *const tm_the_truth_o, object: tm_tt_id_t) -> tm_tt_id_t,
    >,
    pub is_currently_owner_of: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: tm_tt_id_t,
            subobject: tm_tt_id_t,
        ) -> bool,
    >,
    pub is_overridden: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> bool,
    >,
    pub has_data: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> bool,
    >,
    pub prototype_relation: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            parent: tm_tt_id_t,
            property: u32,
            object: tm_tt_id_t,
        ) -> tm_the_truth_prototype_relation,
    >,
    pub version: ::std::option::Option<
        unsafe extern "C" fn(tt: *const tm_the_truth_o, object: tm_tt_id_t) -> u32,
    >,
    pub changed_objects: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            type_: tm_tt_type_t,
            since_version: u64,
            ta: *mut tm_temp_allocator_i,
        ) -> tm_the_truth_changed_objects_t,
    >,
    pub request_changelog:
        ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o) -> u64>,
    pub relinquish_changelog:
        ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o, h: u64)>,
    pub disable_changelog_start_scope:
        ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o)>,
    pub disable_changelog_end_scope:
        ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o)>,
    pub changelog_size: ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o) -> u64>,
    pub serialize: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            o: tm_tt_id_t,
            carray: *mut *mut ::std::os::raw::c_char,
            a: *mut tm_allocator_i,
            opt: *const tm_tt_serialize_options_t,
        ),
    >,
    pub deserialize: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            buffer: *mut *const ::std::os::raw::c_char,
            opt: *const tm_tt_deserialize_options_t,
        ) -> tm_tt_id_t,
    >,
    pub buffer_hashes: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut *const ::std::os::raw::c_char,
            count: *mut u64,
        ) -> *const u64,
    >,
    pub deserialize_from_file: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            file: *const ::std::os::raw::c_char,
        ) -> tm_tt_id_t,
    >,
    pub migration_ids: ::std::option::Option<
        unsafe extern "C" fn(tt: *const tm_the_truth_o, n: *mut u32) -> *mut tm_strhash_t,
    >,
    pub serialize_changes_header: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            carray: *mut *mut ::std::os::raw::c_char,
            a: *mut tm_allocator_i,
        ),
    >,
    pub serialize_changes: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            begin: u64,
            end: u64,
            carray: *mut *mut ::std::os::raw::c_char,
            a: *mut tm_allocator_i,
            opt: *const tm_tt_serialize_changes_options_t,
        ),
    >,
    pub deserialize_changes: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            buffer: *mut *const ::std::os::raw::c_char,
            opt: *const tm_tt_deserialize_changes_options_t,
        ),
    >,
    pub serialize_patch: ::std::option::Option<
        unsafe extern "C" fn(
            from_tt: *mut tm_the_truth_o,
            from_o: tm_tt_id_t,
            to_tt: *mut tm_the_truth_o,
            to_o: tm_tt_id_t,
            carray: *mut *mut ::std::os::raw::c_char,
            a: *mut tm_allocator_i,
        ),
    >,
    pub deserialize_patch: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, buffer: *mut *const ::std::os::raw::c_char),
    >,
    pub deserialize_patch_from_file: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, file: *const ::std::os::raw::c_char),
    >,
    pub serialize_type: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            type_: u32,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub deserialize_type: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            buf: *mut *const ::std::os::raw::c_char,
            type_info: *mut tm_the_truth_serialized_type_info_t,
        ),
    >,
    pub memory_use: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            id: tm_tt_id_t,
            buffers: *mut tm_set_t,
        ) -> tm_tt_memory_use_t,
    >,
    pub add_properties: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            type_: tm_tt_type_t,
            properties: *const tm_the_truth_property_definition_t,
            num_properties: u32,
        ),
    >,
    pub resolve_or_create_placeholder: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            uuid: tm_uuid_t,
            type_: tm_tt_type_t,
            default_initialize: bool,
        ) -> tm_tt_id_t,
    >,
    pub resolve_or_fail: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            uuid: tm_uuid_t,
            type_: tm_tt_type_t,
        ) -> tm_tt_id_t,
    >,
    pub set_uuid: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, id: tm_tt_id_t, uuid: tm_uuid_t),
    >,
    pub set_prototype: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            id: tm_tt_id_t,
        ),
    >,
    pub detach_from_prototype: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            id: tm_tt_id_t,
            lookup: *mut tm_hash_id_to_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub detach_all_instances: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            id: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub get_local_reference_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_the_truth_local_set_t,
    >,
    pub get_local_subobject_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_the_truth_local_set_t,
    >,
    pub set_local_reference_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            set: tm_the_truth_local_set_t,
        ),
    >,
    pub set_local_subobject_set: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            property: u32,
            set: tm_the_truth_set_local_subobject_set_t,
        ),
    >,
    pub string_repository: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o) -> *mut tm_string_repository_i,
    >,
    pub set_migration_ids: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, ids: *mut tm_strhash_t, n: u32),
    >,
    pub set_properties_to_default: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, obj: *mut tm_the_truth_object_o, mask: u64),
    >,
    pub instantiate_subobjects_recursively: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub quick_set_properties: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            undo_scope: tm_tt_undo_scope_t,
            id: tm_tt_id_t,
            ...
        ),
    >,
    pub quick_create_object: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            undo_scope: tm_tt_undo_scope_t,
            type_hash: tm_strhash_t,
            ...
        ) -> tm_tt_id_t,
    >,
    pub quick_get_property: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            id: tm_tt_id_t,
            prop_1: u32,
            ...
        ) -> tm_tt_prop_value_t,
    >,
    pub copy_properties_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            t: *mut tm_the_truth_o,
            to: tm_tt_id_t,
            from: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub internal__make_into_pseudo_object_with_owner: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            owner: tm_tt_id_t,
        ),
    >,
    pub internal__convert_pseudo_object_back_to_regular_object: ::std::option::Option<
        unsafe extern "C" fn(tt: *mut tm_the_truth_o, obj: *mut tm_the_truth_object_o),
    >,
    pub debug_inspect: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: tm_tt_id_t,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub internal__detect_overlapping_writes:
        ::std::option::Option<unsafe extern "C" fn(tt: *const tm_the_truth_o) -> bool>,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut tm_allocator_i,
            types: tm_the_truth_create_types,
        ) -> *mut tm_the_truth_o,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o)>,
}
pub const TM_TT_PROP__ASSET_ROOT__ASSETS: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__ASSET_ROOT__DIRECTORIES: ::std::os::raw::c_int = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub const TM_TT_PROP__ASSET__NAME: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__ASSET__DIRECTORY: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__ASSET__UUID_LABELS: ::std::os::raw::c_int = 2;
pub const TM_TT_PROP__ASSET__OBJECT: ::std::os::raw::c_int = 3;
pub const TM_TT_PROP__ASSET__THUMBNAIL: ::std::os::raw::c_int = 4;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
pub const TM_TT_PROP__ASSET_DIRECTORY__NAME: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__ASSET_DIRECTORY__PARENT: ::std::os::raw::c_int = 1;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
pub const TM_TT_PROP__ASSET_LABEL__UUID: ::std::os::raw::c_int = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_asset_label_uuid_t {
    pub uuid: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_asset_label_t {
    pub uuid: tm_asset_label_uuid_t,
    pub name: *const ::std::os::raw::c_char,
    pub icon: u32,
    pub icon_color: u32,
}
impl Default for tm_asset_label_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type tm_tt_assets_file_extension_aspect_i = ::std::os::raw::c_char;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_tt_assets_buffer_write_t {
    pub id: u32,
    pub _padding_118: [::std::os::raw::c_char; 4usize],
    pub hash: u64,
    pub ext: *const ::std::os::raw::c_char,
}
impl Default for tm_tt_assets_buffer_write_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_tt_assets_buffer_t {
    pub object_id: tm_tt_id_t,
    pub property_index: u32,
    pub _padding_135: [::std::os::raw::c_char; 4usize],
    pub hash: u64,
}
impl Default for tm_tt_assets_buffer_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_saved_truth_data_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_the_truth_assets_api {
    pub get_asset_path: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            asset: tm_tt_id_t,
            path: *mut ::std::os::raw::c_char,
            n: u32,
        ) -> u32,
    >,
    pub get_directory_path: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            directory: tm_tt_id_t,
            path: *mut ::std::os::raw::c_char,
            n: u32,
        ) -> u32,
    >,
    pub get_asset_path_with_extension: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            asset: tm_tt_id_t,
            path: *mut ::std::os::raw::c_char,
            n: u32,
        ) -> u32,
    >,
    pub asset_from_path: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            asset_root: tm_tt_id_t,
            path: *const ::std::os::raw::c_char,
        ) -> tm_tt_id_t,
    >,
    pub asset_from_path_with_type: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            asset_root: tm_tt_id_t,
            path: *const ::std::os::raw::c_char,
            type_: tm_tt_type_t,
        ) -> tm_tt_id_t,
    >,
    pub asset_object_from_path: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            asset_root: tm_tt_id_t,
            path: *const ::std::os::raw::c_char,
        ) -> tm_tt_id_t,
    >,
    pub asset_object_from_path_with_type: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            asset_root: tm_tt_id_t,
            path: *const ::std::os::raw::c_char,
            type_: tm_tt_type_t,
        ) -> tm_tt_id_t,
    >,
    pub directory_from_path: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            asset_root: tm_tt_id_t,
            path: *const ::std::os::raw::c_char,
        ) -> tm_tt_id_t,
    >,
    pub find_subdirectory_by_name: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            asset_root: tm_tt_id_t,
            parent_dir: tm_tt_id_t,
            subdir_name: *const ::std::os::raw::c_char,
        ) -> tm_tt_id_t,
    >,
    pub unique_asset_name: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            asset_root: tm_tt_id_t,
            asset_r: *const tm_the_truth_object_o,
            desired_name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub unique_directory_name: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            asset_root: tm_tt_id_t,
            directory_r: *const tm_the_truth_object_o,
            desired_name: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub object_asset_name: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: tm_tt_id_t,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub find_directory_settings: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            relative_to: tm_tt_id_t,
            target_type_hash: tm_strhash_t,
        ) -> tm_tt_id_t,
    >,
    pub object_to_config: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: tm_tt_id_t,
            config: *mut tm_config_i,
            buffers: *mut *mut tm_tt_assets_buffer_write_t,
            buffers_ta: *mut tm_temp_allocator_i,
            save_uuid: bool,
        ),
    >,
    pub create_object_from_config: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            config: *mut tm_config_i,
            buffers: *mut *mut tm_tt_assets_buffer_t,
            buffers_ta: *mut tm_temp_allocator_i,
        ) -> tm_tt_id_t,
    >,
    pub read_object_from_config: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            config: *mut tm_config_i,
            buffers: *mut *mut tm_tt_assets_buffer_t,
            buffers_ta: *mut tm_temp_allocator_i,
            id: tm_tt_id_t,
        ),
    >,
    pub save_to_directory: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            asset_root: tm_tt_id_t,
            dir: *const ::std::os::raw::c_char,
            ignore: *mut tm_tt_id_t,
            num_ignore: u32,
            old_std: *mut tm_saved_truth_data_o,
            allocator: *mut tm_allocator_i,
        ) -> *mut tm_saved_truth_data_o,
    >,
    pub load_from_directory: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            dir: *const ::std::os::raw::c_char,
            allocator: *mut tm_allocator_i,
            asset_root: *mut tm_tt_id_t,
            error: *mut tm_error_i,
        ) -> *mut tm_saved_truth_data_o,
    >,
    pub current_truth_data: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            asset_root: tm_tt_id_t,
            allocator: *mut tm_allocator_i,
        ) -> *mut tm_saved_truth_data_o,
    >,
    pub revert_asset: ::std::option::Option<
        unsafe extern "C" fn(
            sd: *mut tm_saved_truth_data_o,
            asset: tm_tt_id_t,
            undo_scope: tm_tt_undo_scope_t,
        ) -> bool,
    >,
    pub save_asset: ::std::option::Option<
        unsafe extern "C" fn(sd: *mut tm_saved_truth_data_o, asset: tm_tt_id_t) -> bool,
    >,
    pub saved_name: ::std::option::Option<
        unsafe extern "C" fn(
            sd: *mut tm_saved_truth_data_o,
            item: tm_tt_id_t,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub saved_directory: ::std::option::Option<
        unsafe extern "C" fn(sd: *mut tm_saved_truth_data_o, item: tm_tt_id_t) -> tm_tt_id_t,
    >,
    pub saved_version: ::std::option::Option<
        unsafe extern "C" fn(sd: *mut tm_saved_truth_data_o, item: tm_tt_id_t) -> u64,
    >,
    pub all_saved_items: ::std::option::Option<
        unsafe extern "C" fn(
            sd: *mut tm_saved_truth_data_o,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut tm_tt_id_t,
    >,
    pub free_saved_data:
        ::std::option::Option<unsafe extern "C" fn(sd: *mut tm_saved_truth_data_o)>,
    pub set_mock_file_system: ::std::option::Option<
        unsafe extern "C" fn(fs: *mut tm_os_file_system_api, file_io: *mut tm_os_file_io_api),
    >,
    pub any_disk_changes: ::std::option::Option<
        unsafe extern "C" fn(
            sd: *mut tm_saved_truth_data_o,
            dir: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_migration_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_the_truth_migration_i {
    pub inst: *mut tm_the_truth_migration_o,
    pub id: tm_strhash_t,
    pub num_prerequisites: u32,
    pub _padding_81: [::std::os::raw::c_char; 4usize],
    pub prerequisites: *mut tm_strhash_t,
    pub migrate: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_the_truth_migration_o, tt: *mut tm_the_truth_o) -> bool,
    >,
}
impl Default for tm_the_truth_migration_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_the_truth_migration_api {
    pub migrate: ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o) -> bool>,
}
pub const TM_TT_PROP__VEC2__X: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__VEC2__Y: ::std::os::raw::c_int = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
pub const TM_TT_PROP__VEC3__X: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__VEC3__Y: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__VEC3__Z: ::std::os::raw::c_int = 2;
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
pub const TM_TT_PROP__VEC4__X: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__VEC4__Y: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__VEC4__Z: ::std::os::raw::c_int = 2;
pub const TM_TT_PROP__VEC4__W: ::std::os::raw::c_int = 3;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
pub const TM_TT_PROP__POSITION__X: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__POSITION__Y: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__POSITION__Z: ::std::os::raw::c_int = 2;
pub type _bindgen_ty_9 = ::std::os::raw::c_int;
pub const TM_TT_PROP__ROTATION__X: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__ROTATION__Y: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__ROTATION__Z: ::std::os::raw::c_int = 2;
pub const TM_TT_PROP__ROTATION__W: ::std::os::raw::c_int = 3;
pub type _bindgen_ty_10 = ::std::os::raw::c_int;
pub const TM_TT_PROP__SCALE__X: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__SCALE__Y: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__SCALE__Z: ::std::os::raw::c_int = 2;
pub type _bindgen_ty_11 = ::std::os::raw::c_int;
pub const TM_TT_PROP__COLOR_RGB__R: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__COLOR_RGB__G: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__COLOR_RGB__B: ::std::os::raw::c_int = 2;
pub type _bindgen_ty_12 = ::std::os::raw::c_int;
pub const TM_TT_PROP__COLOR_RGBA__R: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__COLOR_RGBA__G: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__COLOR_RGBA__B: ::std::os::raw::c_int = 2;
pub const TM_TT_PROP__COLOR_RGBA__A: ::std::os::raw::c_int = 3;
pub type _bindgen_ty_13 = ::std::os::raw::c_int;
pub const TM_TT_PROP__RECT__X: ::std::os::raw::c_int = 0;
pub const TM_TT_PROP__RECT__Y: ::std::os::raw::c_int = 1;
pub const TM_TT_PROP__RECT__W: ::std::os::raw::c_int = 2;
pub const TM_TT_PROP__RECT__H: ::std::os::raw::c_int = 3;
pub type _bindgen_ty_14 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_the_truth_common_types_api {
    pub create_common_types: ::std::option::Option<unsafe extern "C" fn(tt: *mut tm_the_truth_o)>,
    pub get_vec2: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_vec2_t,
    >,
    pub get_vec3: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_vec3_t,
    >,
    pub get_vec4: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_vec4_t,
    >,
    pub get_rect: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_rect_t,
    >,
    pub get_position: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_vec3_t,
    >,
    pub get_rotation: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_vec4_t,
    >,
    pub get_scale: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_vec3_t,
    >,
    pub get_color_rgb: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_vec3_t,
    >,
    pub get_color_rgba: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_vec4_t,
    >,
    pub get_color_srgb: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_color_srgb_t,
    >,
    pub get_color_srgba: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            object: *const tm_the_truth_object_o,
            property: u32,
        ) -> tm_color_srgb_t,
    >,
    pub set_vec2: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *mut tm_the_truth_object_o,
            property: u32,
            vec2: tm_vec2_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub set_vec3: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *mut tm_the_truth_object_o,
            property: u32,
            vec3: tm_vec3_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub set_vec4: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *mut tm_the_truth_object_o,
            property: u32,
            vec4: tm_vec4_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub set_rect: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *mut tm_the_truth_object_o,
            property: u32,
            rect: tm_rect_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub set_position: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *mut tm_the_truth_object_o,
            property: u32,
            vec3: tm_vec3_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub set_rotation: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *mut tm_the_truth_object_o,
            property: u32,
            vec4: tm_vec4_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub set_scale: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *mut tm_the_truth_object_o,
            property: u32,
            vec3: tm_vec3_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub set_color_rgb: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *mut tm_the_truth_object_o,
            property: u32,
            vec3: tm_vec3_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub set_color_rgba: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *mut tm_the_truth_object_o,
            property: u32,
            vec4: tm_vec4_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub set_color_srgb: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *mut tm_the_truth_object_o,
            property: u32,
            col: tm_color_srgb_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub set_color_srgba: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            object: *mut tm_the_truth_object_o,
            property: u32,
            col: tm_color_srgb_t,
            undo_scope: tm_tt_undo_scope_t,
        ),
    >,
    pub read_floats: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *const tm_the_truth_o,
            obj: *const tm_the_truth_object_o,
            res: *mut f32,
            n: u32,
        ) -> *mut f32,
    >,
    pub write_floats: ::std::option::Option<
        unsafe extern "C" fn(
            tt: *mut tm_the_truth_o,
            obj: *mut tm_the_truth_object_o,
            values: *const f32,
            n: u32,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_undo_stack_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_undo_stack_i {
    pub inst: *mut tm_undo_stack_o,
    pub add: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_undo_stack_o,
            tt: *mut tm_the_truth_o,
            scope: tm_tt_undo_scope_t,
        ),
    >,
    pub add_to_document: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_undo_stack_o,
            tt: *mut tm_the_truth_o,
            scope: tm_tt_undo_scope_t,
            document_object: tm_tt_id_t,
        ),
    >,
}
impl Default for tm_undo_stack_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_unicode_api {
    pub is_valid:
        ::std::option::Option<unsafe extern "C" fn(utf8: *const ::std::os::raw::c_char) -> bool>,
    pub truncate: ::std::option::Option<unsafe extern "C" fn(utf8: *mut ::std::os::raw::c_char)>,
    pub utf8_encode: ::std::option::Option<
        unsafe extern "C" fn(
            utf8: *mut ::std::os::raw::c_char,
            codepoint: u32,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub utf8_decode: ::std::option::Option<
        unsafe extern "C" fn(utf8: *mut *const ::std::os::raw::c_char) -> u32,
    >,
    pub utf8_num_codepoints:
        ::std::option::Option<unsafe extern "C" fn(utf8: *const ::std::os::raw::c_char) -> u32>,
    pub utf8_decode_n: ::std::option::Option<
        unsafe extern "C" fn(
            codepoints: *mut u32,
            n: u32,
            utf8: *const ::std::os::raw::c_char,
        ) -> u32,
    >,
    pub utf8_to_utf32: ::std::option::Option<
        unsafe extern "C" fn(
            utf8: *const ::std::os::raw::c_char,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut u32,
    >,
    pub utf8_to_utf32_n: ::std::option::Option<
        unsafe extern "C" fn(
            utf8: *const ::std::os::raw::c_char,
            n: u32,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut u32,
    >,
    pub utf32_to_utf8: ::std::option::Option<
        unsafe extern "C" fn(
            utf32: *const u32,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub utf32_to_utf8_n: ::std::option::Option<
        unsafe extern "C" fn(
            utf32: *const u32,
            n: u32,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub utf16_encode:
        ::std::option::Option<unsafe extern "C" fn(utf16: *mut u16, codepoint: u32) -> *mut u16>,
    pub utf16_decode: ::std::option::Option<unsafe extern "C" fn(utf16: *mut *const u16) -> u32>,
    pub utf8_to_utf16: ::std::option::Option<
        unsafe extern "C" fn(
            utf8: *const ::std::os::raw::c_char,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut u16,
    >,
    pub utf8_to_utf16_n: ::std::option::Option<
        unsafe extern "C" fn(
            utf8: *const ::std::os::raw::c_char,
            n: u32,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut u16,
    >,
    pub utf16_to_utf8: ::std::option::Option<
        unsafe extern "C" fn(
            utf16: *const u16,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub utf16_to_utf8_n: ::std::option::Option<
        unsafe extern "C" fn(
            utf16: *const u16,
            n: u32,
            ta: *mut tm_temp_allocator_i,
        ) -> *mut ::std::os::raw::c_char,
    >,
}
pub const TM_UNICODE__HORIZONTAL_ELLIPSIS: ::std::os::raw::c_int = 8230;
pub const TM_UNICODE__ARROW_UPWARDS: ::std::os::raw::c_int = 8593;
pub const TM_UNICODE__ARROW_DOWNWARDS: ::std::os::raw::c_int = 8595;
pub const TM_UNICODE__COPYRIGHT: ::std::os::raw::c_int = 169;
pub const TM_UNICODE__CROSS_MARK: ::std::os::raw::c_int = 10060;
pub const TM_UNICODE__DOUBLE_PRIME: ::std::os::raw::c_int = 8243;
pub type _bindgen_ty_15 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_unit_test_runner_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_unit_test_runner_i {
    pub inst: *mut tm_unit_test_runner_o,
    pub test_file: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_unit_test_runner_o,
            name: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub test_custom: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_unit_test_runner_o,
            name: *const ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub test_disk:
        ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_unit_test_runner_o) -> bool>,
    pub test_network:
        ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_unit_test_runner_o) -> bool>,
    pub test_slow_paths:
        ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_unit_test_runner_o) -> bool>,
    pub record: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_unit_test_runner_o,
            pass: bool,
            test_str: *const ::std::os::raw::c_char,
            file: *const ::std::os::raw::c_char,
            line: u32,
        ) -> bool,
    >,
    pub expect_error: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_unit_test_runner_o,
            err: *const ::std::os::raw::c_char,
            file: *const ::std::os::raw::c_char,
            line: u32,
        ),
    >,
}
impl Default for tm_unit_test_runner_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_unit_test_i {
    pub name: *const ::std::os::raw::c_char,
    pub test: ::std::option::Option<
        unsafe extern "C" fn(tr: *mut tm_unit_test_runner_i, a: *mut tm_allocator_i),
    >,
}
impl Default for tm_unit_test_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TM_VISIBILITY_FLAG_OPT_IN: tm_visibility_flag_behaviour = 0;
pub const TM_VISIBILITY_FLAG_OPT_OUT: tm_visibility_flag_behaviour = 1;
pub type tm_visibility_flag_behaviour = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_visibility_flag_desc_i {
    pub name: tm_strhash_t,
    pub description: *const ::std::os::raw::c_char,
    pub tooltip: *const ::std::os::raw::c_char,
    pub uuid: u32,
    pub behaviour: tm_visibility_flag_behaviour,
}
impl Default for tm_visibility_flag_desc_i {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_visibility_context_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_visibility_flags_api {
    pub create_context: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: *mut tm_allocator_i,
            name: tm_strhash_t,
        ) -> *mut tm_visibility_context_o,
    >,
    pub context_name: ::std::option::Option<
        unsafe extern "C" fn(context: *mut tm_visibility_context_o) -> tm_strhash_t,
    >,
    pub destroy_context:
        ::std::option::Option<unsafe extern "C" fn(context: *mut tm_visibility_context_o)>,
    pub register_visibility_flag: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut tm_visibility_context_o,
            desc: *const tm_visibility_flag_desc_i,
        ) -> u64,
    >,
    pub name_from_visibility_flag: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut tm_visibility_context_o,
            visibility_flag: u64,
        ) -> tm_strhash_t,
    >,
    pub visibility_flag_from_name: ::std::option::Option<
        unsafe extern "C" fn(context: *mut tm_visibility_context_o, name: tm_strhash_t) -> u64,
    >,
    pub unregister_visibility_flag: ::std::option::Option<
        unsafe extern "C" fn(context: *mut tm_visibility_context_o, uuid: u32),
    >,
    pub enumerate_flags: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut tm_visibility_context_o,
            flags: *mut tm_visibility_flag_desc_i,
            num_flags: *mut u32,
        ),
    >,
    pub build_visibility_mask: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut tm_visibility_context_o,
            uuids: *const u32,
            num_uuids: u32,
        ) -> u64,
    >,
}
pub const TM_TT_PROP__VISIBILITY_FLAG__UUID: ::std::os::raw::c_int = 0;
pub type _bindgen_ty_16 = ::std::os::raw::c_int;
pub const TM_WEB_SOCKET_OPCODE_CONTINUATION: tm_web_socket_opcode = 0;
pub const TM_WEB_SOCKET_OPCODE_TEXT: tm_web_socket_opcode = 1;
pub const TM_WEB_SOCKET_OPCODE_BINARY: tm_web_socket_opcode = 2;
pub const TM_WEB_SOCKET_OPCODE_CLOSE: tm_web_socket_opcode = 8;
pub const TM_WEB_SOCKET_OPCODE_PING: tm_web_socket_opcode = 9;
pub const TM_WEB_SOCKET_OPCODE_PONG: tm_web_socket_opcode = 10;
pub type tm_web_socket_opcode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_web_socket_protocol_api {
    pub make_client_handshake: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut ::std::os::raw::c_char,
            size: u32,
            host: *const ::std::os::raw::c_char,
            port: u32,
            request: *const ::std::os::raw::c_char,
            key: *const ::std::os::raw::c_char,
        ),
    >,
    pub make_server_handshake: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut ::std::os::raw::c_char,
            size: u32,
            key: *const ::std::os::raw::c_char,
            key_size: u32,
        ),
    >,
    pub make_frame_header: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut u8, fin: bool, opcode: u8, size: u64, mask: u32) -> u32,
    >,
    pub parse_frame_header: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut u8,
            buf_size: u64,
            fin: *mut bool,
            opcode: *mut u8,
            size: *mut u64,
            mask: *mut u32,
        ) -> u32,
    >,
    pub mask_data: ::std::option::Option<
        unsafe extern "C" fn(data: *mut u8, size: u64, offset: u64, mask: u32),
    >,
    pub mask_segmented_buffer: ::std::option::Option<
        unsafe extern "C" fn(seg: *mut tm_segmented_buffer_t, size: u64, mask: u32),
    >,
}
pub const TM_HTTP_REQUEST_STATUS_IN_PROGRESS: tm_http_request_status = 0;
pub const TM_HTTP_REQUEST_STATUS_SUCCESS: tm_http_request_status = 1;
pub const TM_HTTP_REQUEST_STATUS_ERROR: tm_http_request_status = 2;
pub const TM_HTTP_REQUEST_STATUS_CLOSED: tm_http_request_status = 3;
pub type tm_http_request_status = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_http_request_t {
    pub id: u64,
    pub request_target: *const ::std::os::raw::c_char,
}
impl Default for tm_http_request_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_segmented_buffer_t {
    pub data: *mut ::std::os::raw::c_void,
    pub size: u64,
    pub next: *mut tm_segmented_buffer_t,
}
impl Default for tm_segmented_buffer_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const TM_WEB_SOCKET_PSEUDO_OPCODE_OPEN: tm_web_socket_pseudo_opcode = 16;
pub const TM_WEB_SOCKET_PSEUDO_OPCODE_ERROR: tm_web_socket_pseudo_opcode = 17;
pub type tm_web_socket_pseudo_opcode = ::std::os::raw::c_int;
pub const TM_WEB_SOCKET_STATUS_CONNECTING: tm_web_socket_status = 0;
pub const TM_WEB_SOCKET_STATUS_OPEN: tm_web_socket_status = 1;
pub const TM_WEB_SOCKET_STATUS_CLOSING: tm_web_socket_status = 2;
pub const TM_WEB_SOCKET_STATUS_CLOSED: tm_web_socket_status = 3;
pub const TM_WEB_SOCKET_STATUS_ERROR: tm_web_socket_status = 4;
pub type tm_web_socket_status = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_web_socket_request_t {
    pub id: u64,
    pub request_target: *const ::std::os::raw::c_char,
}
impl Default for tm_web_socket_request_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_web_socket_event_t {
    pub opcode: u32,
    pub _padding_107: [::std::os::raw::c_char; 4usize],
    pub payload_size: u64,
    pub payload: tm_segmented_buffer_t,
    pub payload_reference: *mut ::std::os::raw::c_void,
}
impl Default for tm_web_socket_event_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tm_web_talker_o {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_web_talker_api {
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut tm_allocator_i,
            socket: *mut tm_os_socket_api,
            port: u32,
        ) -> *mut tm_web_talker_o,
    >,
    pub listening_address: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_web_talker_o, address: *mut tm_socket_address_t) -> bool,
    >,
    pub create_no_server: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut tm_allocator_i,
            socket: *mut tm_os_socket_api,
        ) -> *mut tm_web_talker_o,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut tm_web_talker_o)>,
    pub receive: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_web_talker_o)>,
    pub send: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_web_talker_o)>,
    pub http_get_requests: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_web_talker_o,
            buffer: *mut tm_http_request_t,
            capacity: u32,
        ) -> u32,
    >,
    pub http_respond_raw: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_web_talker_o,
            id: u64,
            response: *const ::std::os::raw::c_char,
        ),
    >,
    pub http_respond_html: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_web_talker_o,
            id: u64,
            html: *const ::std::os::raw::c_char,
        ),
    >,
    pub http_request: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_web_talker_o,
            address: tm_socket_address_t,
            headers: *const ::std::os::raw::c_char,
        ) -> u64,
    >,
    pub http_request_status: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_web_talker_o, id: u64) -> tm_http_request_status,
    >,
    pub http_response: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_web_talker_o,
            id: u64,
            size: *mut u64,
        ) -> tm_segmented_buffer_t,
    >,
    pub http_close:
        ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_web_talker_o, id: u64)>,
    pub ws_connect: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_web_talker_o,
            address: tm_socket_address_t,
            host: *const ::std::os::raw::c_char,
            request: *const ::std::os::raw::c_char,
        ) -> u64,
    >,
    pub ws_get_requests: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_web_talker_o,
            buffer: *mut tm_web_socket_request_t,
            capacity: u32,
        ) -> u32,
    >,
    pub ws_status: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_web_talker_o, id: u64) -> tm_web_socket_status,
    >,
    pub ws_recv_progress: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_web_talker_o,
            id: u64,
            bytes: *mut u64,
            total: *mut u64,
        ) -> bool,
    >,
    pub ws_get_events: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_web_talker_o,
            id: u64,
            buffer: *mut tm_web_socket_event_t,
            capacity: u32,
        ) -> u32,
    >,
    pub ws_send_text_frame: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_web_talker_o, id: u64, s: *const ::std::os::raw::c_char),
    >,
    pub ws_send_binary_frame: ::std::option::Option<
        unsafe extern "C" fn(inst: *mut tm_web_talker_o, id: u64, data: *const u8, size: u64),
    >,
    pub ws_send_segmented_binary_frame: ::std::option::Option<
        unsafe extern "C" fn(
            inst: *mut tm_web_talker_o,
            id: u64,
            buf: *const tm_segmented_buffer_t,
            size: u64,
        ),
    >,
    pub ws_send_ping:
        ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_web_talker_o, id: u64)>,
    pub ws_close: ::std::option::Option<unsafe extern "C" fn(inst: *mut tm_web_talker_o, id: u64)>,
    pub copy_segmented_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut ::std::os::raw::c_void,
            segments: *const tm_segmented_buffer_t,
            size: u64,
        ),
    >,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_viewer_manager_o {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_render_pipeline_api {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_asset_io_o {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_plugin_o {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_string_repository_o {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_temp_allocator_o {
    pub _address: u8,
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct tm_hash32_t {
    pub _address: u8,
}
